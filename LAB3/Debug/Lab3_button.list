
Lab3_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003120  08003120  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003120  08003120  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003120  08003120  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000024  0800314c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800314c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a885  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dce  00000000  00000000  0002a8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017521  00000000  00000000  0002dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3c5  00000000  00000000  00044ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827bb  00000000  00000000  000523b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4b71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002980  00000000  00000000  000d4bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080030e4 	.word	0x080030e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080030e4 	.word	0x080030e4

0800014c <fsm_manual>:
 */

#include "fsm_manual.h"

void fsm_manual(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(statusHorizontal)
 8000150:	4b30      	ldr	r3, [pc, #192]	; (8000214 <fsm_manual+0xc8>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b0e      	cmp	r3, #14
 8000156:	d002      	beq.n	800015e <fsm_manual+0x12>
 8000158:	2b0f      	cmp	r3, #15
 800015a:	d02b      	beq.n	80001b4 <fsm_manual+0x68>
			index_7SEG_buffer = 0;
			turnOffAll7SEG();
		}
		break;
	default:
		break;
 800015c:	e058      	b.n	8000210 <fsm_manual+0xc4>
		displayLED(RED, HORIZONTAL);
 800015e:	2111      	movs	r1, #17
 8000160:	2012      	movs	r0, #18
 8000162:	f001 f8b7 	bl	80012d4 <displayLED>
		displayLED(GREEN, VERTICAL);
 8000166:	2110      	movs	r1, #16
 8000168:	2013      	movs	r0, #19
 800016a:	f001 f8b3 	bl	80012d4 <displayLED>
		if(is_button_pressed(2))
 800016e:	2002      	movs	r0, #2
 8000170:	f000 fd48 	bl	8000c04 <is_button_pressed>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d002      	beq.n	8000180 <fsm_manual+0x34>
			statusHorizontal = MAN_GREEN_IN_HORIZONTAL;
 800017a:	4b26      	ldr	r3, [pc, #152]	; (8000214 <fsm_manual+0xc8>)
 800017c:	220f      	movs	r2, #15
 800017e:	601a      	str	r2, [r3, #0]
		if(is_button_pressed(0))
 8000180:	2000      	movs	r0, #0
 8000182:	f000 fd3f 	bl	8000c04 <is_button_pressed>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d03e      	beq.n	800020a <fsm_manual+0xbe>
			statusHorizontal = RED_MODIFY;
 800018c:	4b21      	ldr	r3, [pc, #132]	; (8000214 <fsm_manual+0xc8>)
 800018e:	2205      	movs	r2, #5
 8000190:	601a      	str	r2, [r3, #0]
			turnOffLEDAll();
 8000192:	f001 f9bd 	bl	8001510 <turnOffLEDAll>
			setTimerBlinky(100);
 8000196:	2064      	movs	r0, #100	; 0x64
 8000198:	f001 fbd6 	bl	8001948 <setTimerBlinky>
			setTimer7SEG(50);
 800019c:	2032      	movs	r0, #50	; 0x32
 800019e:	f001 fbbf 	bl	8001920 <setTimer7SEG>
			index_enable = 0;
 80001a2:	4b1d      	ldr	r3, [pc, #116]	; (8000218 <fsm_manual+0xcc>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
			index_7SEG_buffer = 0;
 80001a8:	4b1c      	ldr	r3, [pc, #112]	; (800021c <fsm_manual+0xd0>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
			turnOffAll7SEG();
 80001ae:	f000 fee1 	bl	8000f74 <turnOffAll7SEG>
		break;
 80001b2:	e02a      	b.n	800020a <fsm_manual+0xbe>
		displayLED(GREEN, HORIZONTAL);
 80001b4:	2111      	movs	r1, #17
 80001b6:	2013      	movs	r0, #19
 80001b8:	f001 f88c 	bl	80012d4 <displayLED>
		displayLED(RED, VERTICAL);
 80001bc:	2110      	movs	r1, #16
 80001be:	2012      	movs	r0, #18
 80001c0:	f001 f888 	bl	80012d4 <displayLED>
		if(is_button_pressed(1))
 80001c4:	2001      	movs	r0, #1
 80001c6:	f000 fd1d 	bl	8000c04 <is_button_pressed>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d002      	beq.n	80001d6 <fsm_manual+0x8a>
			statusHorizontal = MAN_RED_IN_HORIZONTAL;
 80001d0:	4b10      	ldr	r3, [pc, #64]	; (8000214 <fsm_manual+0xc8>)
 80001d2:	220e      	movs	r2, #14
 80001d4:	601a      	str	r2, [r3, #0]
		if(is_button_pressed(0))
 80001d6:	2000      	movs	r0, #0
 80001d8:	f000 fd14 	bl	8000c04 <is_button_pressed>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d015      	beq.n	800020e <fsm_manual+0xc2>
			statusHorizontal = RED_MODIFY;
 80001e2:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <fsm_manual+0xc8>)
 80001e4:	2205      	movs	r2, #5
 80001e6:	601a      	str	r2, [r3, #0]
			turnOffLEDAll();
 80001e8:	f001 f992 	bl	8001510 <turnOffLEDAll>
			setTimerBlinky(100);
 80001ec:	2064      	movs	r0, #100	; 0x64
 80001ee:	f001 fbab 	bl	8001948 <setTimerBlinky>
			setTimer7SEG(50);
 80001f2:	2032      	movs	r0, #50	; 0x32
 80001f4:	f001 fb94 	bl	8001920 <setTimer7SEG>
			index_enable = 0;
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <fsm_manual+0xcc>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
			index_7SEG_buffer = 0;
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <fsm_manual+0xd0>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
			turnOffAll7SEG();
 8000204:	f000 feb6 	bl	8000f74 <turnOffAll7SEG>
		break;
 8000208:	e001      	b.n	800020e <fsm_manual+0xc2>
		break;
 800020a:	bf00      	nop
 800020c:	e000      	b.n	8000210 <fsm_manual+0xc4>
		break;
 800020e:	bf00      	nop
	}
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000000 	.word	0x20000000
 8000218:	20000060 	.word	0x20000060
 800021c:	2000005c 	.word	0x2000005c

08000220 <fsm_normal_mode>:
 */

#include "fsm_normal_mode.h"

void fsm_normal_mode()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	runClock();
 8000224:	f000 ff60 	bl	80010e8 <runClock>
	switch(statusHorizontal)
 8000228:	4bb0      	ldr	r3, [pc, #704]	; (80004ec <fsm_normal_mode+0x2cc>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3b01      	subs	r3, #1
 800022e:	2b03      	cmp	r3, #3
 8000230:	f200 80c8 	bhi.w	80003c4 <fsm_normal_mode+0x1a4>
 8000234:	a201      	add	r2, pc, #4	; (adr r2, 800023c <fsm_normal_mode+0x1c>)
 8000236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800023a:	bf00      	nop
 800023c:	0800024d 	.word	0x0800024d
 8000240:	08000291 	.word	0x08000291
 8000244:	080002f7 	.word	0x080002f7
 8000248:	08000361 	.word	0x08000361
	{
	case INIT:
		setTimer7SEG(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f001 fb67 	bl	8001920 <setTimer7SEG>
		setTimerBlinky(-1); //not use in this mode
 8000252:	f04f 30ff 	mov.w	r0, #4294967295
 8000256:	f001 fb77 	bl	8001948 <setTimerBlinky>
		setTimerClock(100);
 800025a:	2064      	movs	r0, #100	; 0x64
 800025c:	f001 fb88 	bl	8001970 <setTimerClock>

		validateDuration();
 8000260:	f001 f8da 	bl	8001418 <validateDuration>
		turnOffLEDAll();
 8000264:	f001 f954 	bl	8001510 <turnOffLEDAll>
		statusHorizontal = NORMAL_RED;
 8000268:	4ba0      	ldr	r3, [pc, #640]	; (80004ec <fsm_normal_mode+0x2cc>)
 800026a:	2202      	movs	r2, #2
 800026c:	601a      	str	r2, [r3, #0]
		setTimerHorizontal(ledDurationBuffer[0]*100);
 800026e:	4ba0      	ldr	r3, [pc, #640]	; (80004f0 <fsm_normal_mode+0x2d0>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2264      	movs	r2, #100	; 0x64
 8000274:	fb02 f303 	mul.w	r3, r2, r3
 8000278:	4618      	mov	r0, r3
 800027a:	f001 fb3d 	bl	80018f8 <setTimerHorizontal>
		index_7SEG_buffer = 0;
 800027e:	4b9d      	ldr	r3, [pc, #628]	; (80004f4 <fsm_normal_mode+0x2d4>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
		index_enable = 0;
 8000284:	4b9c      	ldr	r3, [pc, #624]	; (80004f8 <fsm_normal_mode+0x2d8>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
		updateBuffer();
 800028a:	f000 ff7b 	bl	8001184 <updateBuffer>
		break;
 800028e:	e0a0      	b.n	80003d2 <fsm_normal_mode+0x1b2>
	case NORMAL_RED:
		displayLED(RED, HORIZONTAL);
 8000290:	2111      	movs	r1, #17
 8000292:	2012      	movs	r0, #18
 8000294:	f001 f81e 	bl	80012d4 <displayLED>

		if(timer_horizontal_flag)
 8000298:	4b98      	ldr	r3, [pc, #608]	; (80004fc <fsm_normal_mode+0x2dc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d00a      	beq.n	80002b6 <fsm_normal_mode+0x96>
		{
			statusHorizontal = NORMAL_GREEN;
 80002a0:	4b92      	ldr	r3, [pc, #584]	; (80004ec <fsm_normal_mode+0x2cc>)
 80002a2:	2203      	movs	r2, #3
 80002a4:	601a      	str	r2, [r3, #0]
			setTimerHorizontal(ledDurationBuffer[1]*100);
 80002a6:	4b92      	ldr	r3, [pc, #584]	; (80004f0 <fsm_normal_mode+0x2d0>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	2264      	movs	r2, #100	; 0x64
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fb21 	bl	80018f8 <setTimerHorizontal>
		}
		if(is_button_pressed(0))
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fca4 	bl	8000c04 <is_button_pressed>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f000 8082 	beq.w	80003c8 <fsm_normal_mode+0x1a8>
		{
			statusHorizontal = MAN_RED_IN_HORIZONTAL;
 80002c4:	4b89      	ldr	r3, [pc, #548]	; (80004ec <fsm_normal_mode+0x2cc>)
 80002c6:	220e      	movs	r2, #14
 80002c8:	601a      	str	r2, [r3, #0]
			statusVertical = DISABLE;
 80002ca:	4b8d      	ldr	r3, [pc, #564]	; (8000500 <fsm_normal_mode+0x2e0>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
			setTimerClock(-1);
 80002d0:	f04f 30ff 	mov.w	r0, #4294967295
 80002d4:	f001 fb4c 	bl	8001970 <setTimerClock>
			setTimerHorizontal(-1);
 80002d8:	f04f 30ff 	mov.w	r0, #4294967295
 80002dc:	f001 fb0c 	bl	80018f8 <setTimerHorizontal>
			setTimerVertical(-1);
 80002e0:	f04f 30ff 	mov.w	r0, #4294967295
 80002e4:	f001 faf4 	bl	80018d0 <setTimerVertical>
			setTimer7SEG(-1);
 80002e8:	f04f 30ff 	mov.w	r0, #4294967295
 80002ec:	f001 fb18 	bl	8001920 <setTimer7SEG>
			turnOffAll7SEG();
 80002f0:	f000 fe40 	bl	8000f74 <turnOffAll7SEG>
		}
		break;
 80002f4:	e068      	b.n	80003c8 <fsm_normal_mode+0x1a8>
	case NORMAL_GREEN:
		displayLED(GREEN, HORIZONTAL);
 80002f6:	2111      	movs	r1, #17
 80002f8:	2013      	movs	r0, #19
 80002fa:	f000 ffeb 	bl	80012d4 <displayLED>


		if(timer_horizontal_flag)
 80002fe:	4b7f      	ldr	r3, [pc, #508]	; (80004fc <fsm_normal_mode+0x2dc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d00a      	beq.n	800031c <fsm_normal_mode+0xfc>
		{
			statusHorizontal = NORMAL_YELLOW;
 8000306:	4b79      	ldr	r3, [pc, #484]	; (80004ec <fsm_normal_mode+0x2cc>)
 8000308:	2204      	movs	r2, #4
 800030a:	601a      	str	r2, [r3, #0]
			setTimerHorizontal(ledDurationBuffer[2]*100);
 800030c:	4b78      	ldr	r3, [pc, #480]	; (80004f0 <fsm_normal_mode+0x2d0>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	2264      	movs	r2, #100	; 0x64
 8000312:	fb02 f303 	mul.w	r3, r2, r3
 8000316:	4618      	mov	r0, r3
 8000318:	f001 faee 	bl	80018f8 <setTimerHorizontal>
		}
		if(is_button_pressed(0))
 800031c:	2000      	movs	r0, #0
 800031e:	f000 fc71 	bl	8000c04 <is_button_pressed>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d051      	beq.n	80003cc <fsm_normal_mode+0x1ac>
		{
			is_button_pressed(0);
 8000328:	2000      	movs	r0, #0
 800032a:	f000 fc6b 	bl	8000c04 <is_button_pressed>
			statusHorizontal = MAN_RED_IN_HORIZONTAL;
 800032e:	4b6f      	ldr	r3, [pc, #444]	; (80004ec <fsm_normal_mode+0x2cc>)
 8000330:	220e      	movs	r2, #14
 8000332:	601a      	str	r2, [r3, #0]
			statusVertical = DISABLE;
 8000334:	4b72      	ldr	r3, [pc, #456]	; (8000500 <fsm_normal_mode+0x2e0>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
			setTimerClock(-1);
 800033a:	f04f 30ff 	mov.w	r0, #4294967295
 800033e:	f001 fb17 	bl	8001970 <setTimerClock>
			setTimerHorizontal(-1);
 8000342:	f04f 30ff 	mov.w	r0, #4294967295
 8000346:	f001 fad7 	bl	80018f8 <setTimerHorizontal>
			setTimerVertical(-1);
 800034a:	f04f 30ff 	mov.w	r0, #4294967295
 800034e:	f001 fabf 	bl	80018d0 <setTimerVertical>
			setTimer7SEG(-1);
 8000352:	f04f 30ff 	mov.w	r0, #4294967295
 8000356:	f001 fae3 	bl	8001920 <setTimer7SEG>
			turnOffAll7SEG();
 800035a:	f000 fe0b 	bl	8000f74 <turnOffAll7SEG>
		}
		break;
 800035e:	e035      	b.n	80003cc <fsm_normal_mode+0x1ac>
	case NORMAL_YELLOW:
		displayLED(YELLOW, HORIZONTAL);
 8000360:	2111      	movs	r1, #17
 8000362:	2014      	movs	r0, #20
 8000364:	f000 ffb6 	bl	80012d4 <displayLED>
//		{
//			setTimer7SEG(50);
//			display7SEG(led7SEGBuffer[index_7SEG]);
//			enable7SEGat(index_display7seg);
//		}
		if(timer_horizontal_flag)
 8000368:	4b64      	ldr	r3, [pc, #400]	; (80004fc <fsm_normal_mode+0x2dc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d00a      	beq.n	8000386 <fsm_normal_mode+0x166>
		{
			statusHorizontal = NORMAL_RED;
 8000370:	4b5e      	ldr	r3, [pc, #376]	; (80004ec <fsm_normal_mode+0x2cc>)
 8000372:	2202      	movs	r2, #2
 8000374:	601a      	str	r2, [r3, #0]
			setTimerHorizontal(ledDurationBuffer[0]*100);
 8000376:	4b5e      	ldr	r3, [pc, #376]	; (80004f0 <fsm_normal_mode+0x2d0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2264      	movs	r2, #100	; 0x64
 800037c:	fb02 f303 	mul.w	r3, r2, r3
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fab9 	bl	80018f8 <setTimerHorizontal>
		}
		if(is_button_pressed(0))
 8000386:	2000      	movs	r0, #0
 8000388:	f000 fc3c 	bl	8000c04 <is_button_pressed>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d01e      	beq.n	80003d0 <fsm_normal_mode+0x1b0>
		{
			statusHorizontal = MAN_RED_IN_HORIZONTAL;
 8000392:	4b56      	ldr	r3, [pc, #344]	; (80004ec <fsm_normal_mode+0x2cc>)
 8000394:	220e      	movs	r2, #14
 8000396:	601a      	str	r2, [r3, #0]
			statusVertical = DISABLE;
 8000398:	4b59      	ldr	r3, [pc, #356]	; (8000500 <fsm_normal_mode+0x2e0>)
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
			setTimerClock(-1);
 800039e:	f04f 30ff 	mov.w	r0, #4294967295
 80003a2:	f001 fae5 	bl	8001970 <setTimerClock>
			setTimerHorizontal(-1);
 80003a6:	f04f 30ff 	mov.w	r0, #4294967295
 80003aa:	f001 faa5 	bl	80018f8 <setTimerHorizontal>
			setTimerVertical(-1);
 80003ae:	f04f 30ff 	mov.w	r0, #4294967295
 80003b2:	f001 fa8d 	bl	80018d0 <setTimerVertical>
			setTimer7SEG(-1);
 80003b6:	f04f 30ff 	mov.w	r0, #4294967295
 80003ba:	f001 fab1 	bl	8001920 <setTimer7SEG>
			turnOffAll7SEG();
 80003be:	f000 fdd9 	bl	8000f74 <turnOffAll7SEG>
		}
		break;
 80003c2:	e005      	b.n	80003d0 <fsm_normal_mode+0x1b0>
	default:
		break;
 80003c4:	bf00      	nop
 80003c6:	e004      	b.n	80003d2 <fsm_normal_mode+0x1b2>
		break;
 80003c8:	bf00      	nop
 80003ca:	e002      	b.n	80003d2 <fsm_normal_mode+0x1b2>
		break;
 80003cc:	bf00      	nop
 80003ce:	e000      	b.n	80003d2 <fsm_normal_mode+0x1b2>
		break;
 80003d0:	bf00      	nop
	}
	switch(statusVertical)
 80003d2:	4b4b      	ldr	r3, [pc, #300]	; (8000500 <fsm_normal_mode+0x2e0>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	2b03      	cmp	r3, #3
 80003da:	f200 80cd 	bhi.w	8000578 <fsm_normal_mode+0x358>
 80003de:	a201      	add	r2, pc, #4	; (adr r2, 80003e4 <fsm_normal_mode+0x1c4>)
 80003e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e4:	080003f5 	.word	0x080003f5
 80003e8:	08000415 	.word	0x08000415
 80003ec:	08000487 	.word	0x08000487
 80003f0:	08000509 	.word	0x08000509
	{
	case INIT:
		validateDuration();
 80003f4:	f001 f810 	bl	8001418 <validateDuration>
		turnOffLEDAll();
 80003f8:	f001 f88a 	bl	8001510 <turnOffLEDAll>
		statusVertical = NORMAL_GREEN;
 80003fc:	4b40      	ldr	r3, [pc, #256]	; (8000500 <fsm_normal_mode+0x2e0>)
 80003fe:	2203      	movs	r2, #3
 8000400:	601a      	str	r2, [r3, #0]
		setTimerVertical(ledDurationBuffer[1]*100);
 8000402:	4b3b      	ldr	r3, [pc, #236]	; (80004f0 <fsm_normal_mode+0x2d0>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	2264      	movs	r2, #100	; 0x64
 8000408:	fb02 f303 	mul.w	r3, r2, r3
 800040c:	4618      	mov	r0, r3
 800040e:	f001 fa5f 	bl	80018d0 <setTimerVertical>
		break;
 8000412:	e0b8      	b.n	8000586 <fsm_normal_mode+0x366>
	case NORMAL_RED:
		displayLED(RED, VERTICAL);
 8000414:	2110      	movs	r1, #16
 8000416:	2012      	movs	r0, #18
 8000418:	f000 ff5c 	bl	80012d4 <displayLED>
		if(timer_vertical_flag)
 800041c:	4b39      	ldr	r3, [pc, #228]	; (8000504 <fsm_normal_mode+0x2e4>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d010      	beq.n	8000446 <fsm_normal_mode+0x226>
		{
			statusVertical = NORMAL_GREEN;
 8000424:	4b36      	ldr	r3, [pc, #216]	; (8000500 <fsm_normal_mode+0x2e0>)
 8000426:	2203      	movs	r2, #3
 8000428:	601a      	str	r2, [r3, #0]
			setTimerVertical(ledDurationBuffer[1]*100);
 800042a:	4b31      	ldr	r3, [pc, #196]	; (80004f0 <fsm_normal_mode+0x2d0>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	2264      	movs	r2, #100	; 0x64
 8000430:	fb02 f303 	mul.w	r3, r2, r3
 8000434:	4618      	mov	r0, r3
 8000436:	f001 fa4b 	bl	80018d0 <setTimerVertical>
			index_7SEG_buffer = 0;
 800043a:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <fsm_normal_mode+0x2d4>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
			index_enable = 0;
 8000440:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <fsm_normal_mode+0x2d8>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(0))
 8000446:	2000      	movs	r0, #0
 8000448:	f000 fbdc 	bl	8000c04 <is_button_pressed>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	f000 8094 	beq.w	800057c <fsm_normal_mode+0x35c>
		{
			statusHorizontal = MAN_RED_IN_HORIZONTAL;
 8000454:	4b25      	ldr	r3, [pc, #148]	; (80004ec <fsm_normal_mode+0x2cc>)
 8000456:	220e      	movs	r2, #14
 8000458:	601a      	str	r2, [r3, #0]
			statusVertical = DISABLE;
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <fsm_normal_mode+0x2e0>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
			setTimerClock(-1);
 8000460:	f04f 30ff 	mov.w	r0, #4294967295
 8000464:	f001 fa84 	bl	8001970 <setTimerClock>
			setTimerHorizontal(-1);
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f001 fa44 	bl	80018f8 <setTimerHorizontal>
			setTimerVertical(-1);
 8000470:	f04f 30ff 	mov.w	r0, #4294967295
 8000474:	f001 fa2c 	bl	80018d0 <setTimerVertical>
			setTimer7SEG(-1);
 8000478:	f04f 30ff 	mov.w	r0, #4294967295
 800047c:	f001 fa50 	bl	8001920 <setTimer7SEG>
			turnOffAll7SEG();
 8000480:	f000 fd78 	bl	8000f74 <turnOffAll7SEG>
		}
		break;
 8000484:	e07a      	b.n	800057c <fsm_normal_mode+0x35c>
	case NORMAL_GREEN:
		displayLED(GREEN, VERTICAL);
 8000486:	2110      	movs	r1, #16
 8000488:	2013      	movs	r0, #19
 800048a:	f000 ff23 	bl	80012d4 <displayLED>
		if(timer_vertical_flag)
 800048e:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <fsm_normal_mode+0x2e4>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d00a      	beq.n	80004ac <fsm_normal_mode+0x28c>
		{
			statusVertical = NORMAL_YELLOW;
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <fsm_normal_mode+0x2e0>)
 8000498:	2204      	movs	r2, #4
 800049a:	601a      	str	r2, [r3, #0]
			setTimerVertical(ledDurationBuffer[2]*100);
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <fsm_normal_mode+0x2d0>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	2264      	movs	r2, #100	; 0x64
 80004a2:	fb02 f303 	mul.w	r3, r2, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fa12 	bl	80018d0 <setTimerVertical>
		}
		if(is_button_pressed(0))
 80004ac:	2000      	movs	r0, #0
 80004ae:	f000 fba9 	bl	8000c04 <is_button_pressed>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d063      	beq.n	8000580 <fsm_normal_mode+0x360>
		{
			statusHorizontal = MAN_RED_IN_HORIZONTAL;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <fsm_normal_mode+0x2cc>)
 80004ba:	220e      	movs	r2, #14
 80004bc:	601a      	str	r2, [r3, #0]
			statusVertical = DISABLE;
 80004be:	4b10      	ldr	r3, [pc, #64]	; (8000500 <fsm_normal_mode+0x2e0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
			setTimerClock(-1);
 80004c4:	f04f 30ff 	mov.w	r0, #4294967295
 80004c8:	f001 fa52 	bl	8001970 <setTimerClock>
			setTimerHorizontal(-1);
 80004cc:	f04f 30ff 	mov.w	r0, #4294967295
 80004d0:	f001 fa12 	bl	80018f8 <setTimerHorizontal>
			setTimerVertical(-1);
 80004d4:	f04f 30ff 	mov.w	r0, #4294967295
 80004d8:	f001 f9fa 	bl	80018d0 <setTimerVertical>
			setTimer7SEG(-1);
 80004dc:	f04f 30ff 	mov.w	r0, #4294967295
 80004e0:	f001 fa1e 	bl	8001920 <setTimer7SEG>
			turnOffAll7SEG();
 80004e4:	f000 fd46 	bl	8000f74 <turnOffAll7SEG>
		}
		break;
 80004e8:	e04a      	b.n	8000580 <fsm_normal_mode+0x360>
 80004ea:	bf00      	nop
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000008 	.word	0x20000008
 80004f4:	2000005c 	.word	0x2000005c
 80004f8:	20000060 	.word	0x20000060
 80004fc:	20000074 	.word	0x20000074
 8000500:	20000004 	.word	0x20000004
 8000504:	20000078 	.word	0x20000078
	case NORMAL_YELLOW:
		displayLED(YELLOW, VERTICAL);
 8000508:	2110      	movs	r1, #16
 800050a:	2014      	movs	r0, #20
 800050c:	f000 fee2 	bl	80012d4 <displayLED>
		if(timer_vertical_flag)
 8000510:	4b36      	ldr	r3, [pc, #216]	; (80005ec <fsm_normal_mode+0x3cc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d010      	beq.n	800053a <fsm_normal_mode+0x31a>
		{
			statusVertical = NORMAL_RED;
 8000518:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <fsm_normal_mode+0x3d0>)
 800051a:	2202      	movs	r2, #2
 800051c:	601a      	str	r2, [r3, #0]
			setTimerVertical(ledDurationBuffer[0]*100);
 800051e:	4b35      	ldr	r3, [pc, #212]	; (80005f4 <fsm_normal_mode+0x3d4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2264      	movs	r2, #100	; 0x64
 8000524:	fb02 f303 	mul.w	r3, r2, r3
 8000528:	4618      	mov	r0, r3
 800052a:	f001 f9d1 	bl	80018d0 <setTimerVertical>
			index_enable = 2;
 800052e:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <fsm_normal_mode+0x3d8>)
 8000530:	2202      	movs	r2, #2
 8000532:	601a      	str	r2, [r3, #0]
			index_7SEG_buffer = 0;
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <fsm_normal_mode+0x3dc>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(0))
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fb62 	bl	8000c04 <is_button_pressed>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d01e      	beq.n	8000584 <fsm_normal_mode+0x364>
		{
			statusHorizontal = MAN_RED_IN_HORIZONTAL;
 8000546:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <fsm_normal_mode+0x3e0>)
 8000548:	220e      	movs	r2, #14
 800054a:	601a      	str	r2, [r3, #0]
			statusVertical = DISABLE;
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <fsm_normal_mode+0x3d0>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
			setTimerClock(-1);
 8000552:	f04f 30ff 	mov.w	r0, #4294967295
 8000556:	f001 fa0b 	bl	8001970 <setTimerClock>
			setTimerHorizontal(-1);
 800055a:	f04f 30ff 	mov.w	r0, #4294967295
 800055e:	f001 f9cb 	bl	80018f8 <setTimerHorizontal>
			setTimerVertical(-1);
 8000562:	f04f 30ff 	mov.w	r0, #4294967295
 8000566:	f001 f9b3 	bl	80018d0 <setTimerVertical>
			setTimer7SEG(-1);
 800056a:	f04f 30ff 	mov.w	r0, #4294967295
 800056e:	f001 f9d7 	bl	8001920 <setTimer7SEG>
			turnOffAll7SEG();
 8000572:	f000 fcff 	bl	8000f74 <turnOffAll7SEG>
		}
		break;
 8000576:	e005      	b.n	8000584 <fsm_normal_mode+0x364>
	default:
		break;
 8000578:	bf00      	nop
 800057a:	e004      	b.n	8000586 <fsm_normal_mode+0x366>
		break;
 800057c:	bf00      	nop
 800057e:	e002      	b.n	8000586 <fsm_normal_mode+0x366>
		break;
 8000580:	bf00      	nop
 8000582:	e000      	b.n	8000586 <fsm_normal_mode+0x366>
		break;
 8000584:	bf00      	nop
	}
	if(timer_7seg_flag && statusVertical != DISABLE)
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <fsm_normal_mode+0x3e4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d02b      	beq.n	80005e6 <fsm_normal_mode+0x3c6>
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <fsm_normal_mode+0x3d0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d027      	beq.n	80005e6 <fsm_normal_mode+0x3c6>
	{
	    setTimer7SEG(50);
 8000596:	2032      	movs	r0, #50	; 0x32
 8000598:	f001 f9c2 	bl	8001920 <setTimer7SEG>
		display7SEG(led7SEGBuffer[index_7SEG_buffer]);
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <fsm_normal_mode+0x3dc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <fsm_normal_mode+0x3e8>)
 80005a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fb4a 	bl	8000c40 <display7SEG>
		enable7SEGat(index_enable);
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <fsm_normal_mode+0x3d8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fd4f 	bl	8001054 <enable7SEGat>
		index_enable = (index_enable + 1) % 4;
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <fsm_normal_mode+0x3d8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	425a      	negs	r2, r3
 80005be:	f003 0303 	and.w	r3, r3, #3
 80005c2:	f002 0203 	and.w	r2, r2, #3
 80005c6:	bf58      	it	pl
 80005c8:	4253      	negpl	r3, r2
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <fsm_normal_mode+0x3d8>)
 80005cc:	6013      	str	r3, [r2, #0]
		index_7SEG_buffer = (index_7SEG_buffer + 1) % 4;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <fsm_normal_mode+0x3dc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	425a      	negs	r2, r3
 80005d6:	f003 0303 	and.w	r3, r3, #3
 80005da:	f002 0203 	and.w	r2, r2, #3
 80005de:	bf58      	it	pl
 80005e0:	4253      	negpl	r3, r2
 80005e2:	4a06      	ldr	r2, [pc, #24]	; (80005fc <fsm_normal_mode+0x3dc>)
 80005e4:	6013      	str	r3, [r2, #0]
	}
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000078 	.word	0x20000078
 80005f0:	20000004 	.word	0x20000004
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000060 	.word	0x20000060
 80005fc:	2000005c 	.word	0x2000005c
 8000600:	20000000 	.word	0x20000000
 8000604:	2000007c 	.word	0x2000007c
 8000608:	2000009c 	.word	0x2000009c

0800060c <fsm_setting>:

#include "fsm_setting.h"


void fsm_setting(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	switch(statusHorizontal)
 8000610:	4bb1      	ldr	r3, [pc, #708]	; (80008d8 <fsm_setting+0x2cc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3b05      	subs	r3, #5
 8000616:	2b08      	cmp	r3, #8
 8000618:	f200 8250 	bhi.w	8000abc <fsm_setting+0x4b0>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <fsm_setting+0x18>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000649 	.word	0x08000649
 8000628:	080006eb 	.word	0x080006eb
 800062c:	08000775 	.word	0x08000775
 8000630:	080007b7 	.word	0x080007b7
 8000634:	0800084d 	.word	0x0800084d
 8000638:	080008f5 	.word	0x080008f5
 800063c:	0800093b 	.word	0x0800093b
 8000640:	080009d3 	.word	0x080009d3
 8000644:	08000a5b 	.word	0x08000a5b
	{
	case RED_MODIFY:
		blinkyLED1s(RED);
 8000648:	2012      	movs	r0, #18
 800064a:	f000 ff11 	bl	8001470 <blinkyLED1s>
		init7SEGBuffer_setting(RED_MODIFY, red_duration);
 800064e:	4ba3      	ldr	r3, [pc, #652]	; (80008dc <fsm_setting+0x2d0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	2005      	movs	r0, #5
 8000656:	f000 fdeb 	bl	8001230 <init7SEGBuffer_setting>
		if(is_button_pressed(0))
 800065a:	2000      	movs	r0, #0
 800065c:	f000 fad2 	bl	8000c04 <is_button_pressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d004      	beq.n	8000670 <fsm_setting+0x64>
		{
			turnOffLEDAll();
 8000666:	f000 ff53 	bl	8001510 <turnOffLEDAll>
			statusHorizontal = GREEN_MODIFY;
 800066a:	4b9b      	ldr	r3, [pc, #620]	; (80008d8 <fsm_setting+0x2cc>)
 800066c:	2208      	movs	r2, #8
 800066e:	601a      	str	r2, [r3, #0]
		}

		if(is_button_pressed(1))
 8000670:	2001      	movs	r0, #1
 8000672:	f000 fac7 	bl	8000c04 <is_button_pressed>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d008      	beq.n	800068e <fsm_setting+0x82>
		{
			statusHorizontal = RED_CHANGE_DURATION;
 800067c:	4b96      	ldr	r3, [pc, #600]	; (80008d8 <fsm_setting+0x2cc>)
 800067e:	2206      	movs	r2, #6
 8000680:	601a      	str	r2, [r3, #0]
			index_7SEG_buffer = 0;
 8000682:	4b97      	ldr	r3, [pc, #604]	; (80008e0 <fsm_setting+0x2d4>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
			index_enable = 0;
 8000688:	4b96      	ldr	r3, [pc, #600]	; (80008e4 <fsm_setting+0x2d8>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
		}
		if(timer_7seg_flag)
 800068e:	4b96      	ldr	r3, [pc, #600]	; (80008e8 <fsm_setting+0x2dc>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	f000 8201 	beq.w	8000a9a <fsm_setting+0x48e>
		{
			setTimer7SEG(50);
 8000698:	2032      	movs	r0, #50	; 0x32
 800069a:	f001 f941 	bl	8001920 <setTimer7SEG>
			display7SEG(led7SEGBuffer_setting[index_7SEG_buffer]);
 800069e:	4b90      	ldr	r3, [pc, #576]	; (80008e0 <fsm_setting+0x2d4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a92      	ldr	r2, [pc, #584]	; (80008ec <fsm_setting+0x2e0>)
 80006a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fac9 	bl	8000c40 <display7SEG>
			enable7SEGat(index_enable);
 80006ae:	4b8d      	ldr	r3, [pc, #564]	; (80008e4 <fsm_setting+0x2d8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fcce 	bl	8001054 <enable7SEGat>
			index_enable = (index_enable + 1) % 4;
 80006b8:	4b8a      	ldr	r3, [pc, #552]	; (80008e4 <fsm_setting+0x2d8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	425a      	negs	r2, r3
 80006c0:	f003 0303 	and.w	r3, r3, #3
 80006c4:	f002 0203 	and.w	r2, r2, #3
 80006c8:	bf58      	it	pl
 80006ca:	4253      	negpl	r3, r2
 80006cc:	4a85      	ldr	r2, [pc, #532]	; (80008e4 <fsm_setting+0x2d8>)
 80006ce:	6013      	str	r3, [r2, #0]
			index_7SEG_buffer = (index_7SEG_buffer + 1) % 4;
 80006d0:	4b83      	ldr	r3, [pc, #524]	; (80008e0 <fsm_setting+0x2d4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	425a      	negs	r2, r3
 80006d8:	f003 0303 	and.w	r3, r3, #3
 80006dc:	f002 0203 	and.w	r2, r2, #3
 80006e0:	bf58      	it	pl
 80006e2:	4253      	negpl	r3, r2
 80006e4:	4a7e      	ldr	r2, [pc, #504]	; (80008e0 <fsm_setting+0x2d4>)
 80006e6:	6013      	str	r3, [r2, #0]
		}
		break;
 80006e8:	e1d7      	b.n	8000a9a <fsm_setting+0x48e>
	case RED_CHANGE_DURATION:
		if(is_button_pressed(1))
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fa8a 	bl	8000c04 <is_button_pressed>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d007      	beq.n	8000706 <fsm_setting+0xfa>
		{
			set7SEGBuffer_setting(red_duration++);
 80006f6:	4b79      	ldr	r3, [pc, #484]	; (80008dc <fsm_setting+0x2d0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	4977      	ldr	r1, [pc, #476]	; (80008dc <fsm_setting+0x2d0>)
 80006fe:	600a      	str	r2, [r1, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fc79 	bl	8000ff8 <set7SEGBuffer_setting>
		}
		if(is_button_pressed(2))
 8000706:	2002      	movs	r0, #2
 8000708:	f000 fa7c 	bl	8000c04 <is_button_pressed>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <fsm_setting+0x10c>
		{
			statusHorizontal = RED_SET_DURATION;
 8000712:	4b71      	ldr	r3, [pc, #452]	; (80008d8 <fsm_setting+0x2cc>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
		}
		if(timer_7seg_flag)
 8000718:	4b73      	ldr	r3, [pc, #460]	; (80008e8 <fsm_setting+0x2dc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	f000 81be 	beq.w	8000a9e <fsm_setting+0x492>
		{
			setTimer7SEG(50);
 8000722:	2032      	movs	r0, #50	; 0x32
 8000724:	f001 f8fc 	bl	8001920 <setTimer7SEG>
			display7SEG(led7SEGBuffer_setting[index_7SEG_buffer]);
 8000728:	4b6d      	ldr	r3, [pc, #436]	; (80008e0 <fsm_setting+0x2d4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a6f      	ldr	r2, [pc, #444]	; (80008ec <fsm_setting+0x2e0>)
 800072e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fa84 	bl	8000c40 <display7SEG>
			enable7SEGat(index_enable);
 8000738:	4b6a      	ldr	r3, [pc, #424]	; (80008e4 <fsm_setting+0x2d8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fc89 	bl	8001054 <enable7SEGat>
			index_enable = (index_enable + 1) % 4;
 8000742:	4b68      	ldr	r3, [pc, #416]	; (80008e4 <fsm_setting+0x2d8>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	425a      	negs	r2, r3
 800074a:	f003 0303 	and.w	r3, r3, #3
 800074e:	f002 0203 	and.w	r2, r2, #3
 8000752:	bf58      	it	pl
 8000754:	4253      	negpl	r3, r2
 8000756:	4a63      	ldr	r2, [pc, #396]	; (80008e4 <fsm_setting+0x2d8>)
 8000758:	6013      	str	r3, [r2, #0]
			index_7SEG_buffer = (index_7SEG_buffer + 1) % 4;
 800075a:	4b61      	ldr	r3, [pc, #388]	; (80008e0 <fsm_setting+0x2d4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	425a      	negs	r2, r3
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	f002 0203 	and.w	r2, r2, #3
 800076a:	bf58      	it	pl
 800076c:	4253      	negpl	r3, r2
 800076e:	4a5c      	ldr	r2, [pc, #368]	; (80008e0 <fsm_setting+0x2d4>)
 8000770:	6013      	str	r3, [r2, #0]
		}
		break;
 8000772:	e194      	b.n	8000a9e <fsm_setting+0x492>
	case RED_SET_DURATION:
		if(red_duration != 0)
 8000774:	4b59      	ldr	r3, [pc, #356]	; (80008dc <fsm_setting+0x2d0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d008      	beq.n	800078e <fsm_setting+0x182>
		{
			setDurationBuffer(0, red_duration);
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <fsm_setting+0x2d0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	2000      	movs	r0, #0
 8000784:	f000 fe36 	bl	80013f4 <setDurationBuffer>
			red_duration = 0;
 8000788:	4b54      	ldr	r3, [pc, #336]	; (80008dc <fsm_setting+0x2d0>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
		}

		if(is_button_pressed(0))
 800078e:	2000      	movs	r0, #0
 8000790:	f000 fa38 	bl	8000c04 <is_button_pressed>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <fsm_setting+0x194>
		{
			statusHorizontal = RED_MODIFY;
 800079a:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <fsm_setting+0x2cc>)
 800079c:	2205      	movs	r2, #5
 800079e:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(1))
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 fa2f 	bl	8000c04 <is_button_pressed>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f000 817a 	beq.w	8000aa2 <fsm_setting+0x496>
		{
			statusHorizontal = RED_CHANGE_DURATION;
 80007ae:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <fsm_setting+0x2cc>)
 80007b0:	2206      	movs	r2, #6
 80007b2:	601a      	str	r2, [r3, #0]
		}
		break;
 80007b4:	e175      	b.n	8000aa2 <fsm_setting+0x496>

	case GREEN_MODIFY:
		blinkyLED1s(GREEN);
 80007b6:	2013      	movs	r0, #19
 80007b8:	f000 fe5a 	bl	8001470 <blinkyLED1s>
		init7SEGBuffer_setting(GREEN_MODIFY, green_duration);
 80007bc:	4b4c      	ldr	r3, [pc, #304]	; (80008f0 <fsm_setting+0x2e4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2008      	movs	r0, #8
 80007c4:	f000 fd34 	bl	8001230 <init7SEGBuffer_setting>
		if(is_button_pressed(0))
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fa1b 	bl	8000c04 <is_button_pressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d004      	beq.n	80007de <fsm_setting+0x1d2>
		{
			turnOffLEDAll();
 80007d4:	f000 fe9c 	bl	8001510 <turnOffLEDAll>
			statusHorizontal = YELLOW_MODIFY;
 80007d8:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <fsm_setting+0x2cc>)
 80007da:	220b      	movs	r2, #11
 80007dc:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(1))
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 fa10 	bl	8000c04 <is_button_pressed>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <fsm_setting+0x1e4>
		{
			statusHorizontal = GREEN_CHANGE_DURATION;
 80007ea:	4b3b      	ldr	r3, [pc, #236]	; (80008d8 <fsm_setting+0x2cc>)
 80007ec:	2209      	movs	r2, #9
 80007ee:	601a      	str	r2, [r3, #0]
		}

		if(timer_7seg_flag)
 80007f0:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <fsm_setting+0x2dc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f000 8156 	beq.w	8000aa6 <fsm_setting+0x49a>
		{
			setTimer7SEG(50);
 80007fa:	2032      	movs	r0, #50	; 0x32
 80007fc:	f001 f890 	bl	8001920 <setTimer7SEG>
			display7SEG(led7SEGBuffer_setting[index_7SEG_buffer]);
 8000800:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <fsm_setting+0x2d4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a39      	ldr	r2, [pc, #228]	; (80008ec <fsm_setting+0x2e0>)
 8000806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fa18 	bl	8000c40 <display7SEG>
			enable7SEGat(index_enable);
 8000810:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <fsm_setting+0x2d8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fc1d 	bl	8001054 <enable7SEGat>
			index_enable = (index_enable + 1) % 4;
 800081a:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <fsm_setting+0x2d8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	425a      	negs	r2, r3
 8000822:	f003 0303 	and.w	r3, r3, #3
 8000826:	f002 0203 	and.w	r2, r2, #3
 800082a:	bf58      	it	pl
 800082c:	4253      	negpl	r3, r2
 800082e:	4a2d      	ldr	r2, [pc, #180]	; (80008e4 <fsm_setting+0x2d8>)
 8000830:	6013      	str	r3, [r2, #0]
			index_7SEG_buffer = (index_7SEG_buffer + 1) % 4;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <fsm_setting+0x2d4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	425a      	negs	r2, r3
 800083a:	f003 0303 	and.w	r3, r3, #3
 800083e:	f002 0203 	and.w	r2, r2, #3
 8000842:	bf58      	it	pl
 8000844:	4253      	negpl	r3, r2
 8000846:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <fsm_setting+0x2d4>)
 8000848:	6013      	str	r3, [r2, #0]
		}

		break;
 800084a:	e12c      	b.n	8000aa6 <fsm_setting+0x49a>
	case GREEN_CHANGE_DURATION:
		if(is_button_pressed(1))
 800084c:	2001      	movs	r0, #1
 800084e:	f000 f9d9 	bl	8000c04 <is_button_pressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d007      	beq.n	8000868 <fsm_setting+0x25c>
		{
			set7SEGBuffer_setting(green_duration++);
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <fsm_setting+0x2e4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	1c5a      	adds	r2, r3, #1
 800085e:	4924      	ldr	r1, [pc, #144]	; (80008f0 <fsm_setting+0x2e4>)
 8000860:	600a      	str	r2, [r1, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fbc8 	bl	8000ff8 <set7SEGBuffer_setting>
		}

		if(is_button_pressed(2))
 8000868:	2002      	movs	r0, #2
 800086a:	f000 f9cb 	bl	8000c04 <is_button_pressed>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <fsm_setting+0x26e>
		{
			statusHorizontal = GREEN_SET_DURATION;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <fsm_setting+0x2cc>)
 8000876:	220a      	movs	r2, #10
 8000878:	601a      	str	r2, [r3, #0]
		}

		if(timer_7seg_flag)
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <fsm_setting+0x2dc>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 8113 	beq.w	8000aaa <fsm_setting+0x49e>
		{
			setTimer7SEG(50);
 8000884:	2032      	movs	r0, #50	; 0x32
 8000886:	f001 f84b 	bl	8001920 <setTimer7SEG>
			display7SEG(led7SEGBuffer_setting[index_7SEG_buffer]);
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <fsm_setting+0x2d4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <fsm_setting+0x2e0>)
 8000890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f9d3 	bl	8000c40 <display7SEG>
			enable7SEGat(index_enable);
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <fsm_setting+0x2d8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fbd8 	bl	8001054 <enable7SEGat>
			index_enable = (index_enable + 1) % 4;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <fsm_setting+0x2d8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	425a      	negs	r2, r3
 80008ac:	f003 0303 	and.w	r3, r3, #3
 80008b0:	f002 0203 	and.w	r2, r2, #3
 80008b4:	bf58      	it	pl
 80008b6:	4253      	negpl	r3, r2
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <fsm_setting+0x2d8>)
 80008ba:	6013      	str	r3, [r2, #0]
			index_7SEG_buffer = (index_7SEG_buffer + 1) % 4;
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <fsm_setting+0x2d4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	425a      	negs	r2, r3
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	f002 0203 	and.w	r2, r2, #3
 80008cc:	bf58      	it	pl
 80008ce:	4253      	negpl	r3, r2
 80008d0:	4a03      	ldr	r2, [pc, #12]	; (80008e0 <fsm_setting+0x2d4>)
 80008d2:	6013      	str	r3, [r2, #0]
		}
		break;
 80008d4:	e0e9      	b.n	8000aaa <fsm_setting+0x49e>
 80008d6:	bf00      	nop
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000050 	.word	0x20000050
 80008e0:	2000005c 	.word	0x2000005c
 80008e4:	20000060 	.word	0x20000060
 80008e8:	2000007c 	.word	0x2000007c
 80008ec:	20000040 	.word	0x20000040
 80008f0:	20000054 	.word	0x20000054
	case GREEN_SET_DURATION:
		if(green_duration != 0)
 80008f4:	4b72      	ldr	r3, [pc, #456]	; (8000ac0 <fsm_setting+0x4b4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d008      	beq.n	800090e <fsm_setting+0x302>
		{
			setDurationBuffer(1, green_duration);
 80008fc:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <fsm_setting+0x4b4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	2001      	movs	r0, #1
 8000904:	f000 fd76 	bl	80013f4 <setDurationBuffer>
			green_duration = 0;
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <fsm_setting+0x4b4>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
		}

		if(is_button_pressed(0))
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f978 	bl	8000c04 <is_button_pressed>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d004      	beq.n	8000924 <fsm_setting+0x318>
		{
			turnOffLEDAll();
 800091a:	f000 fdf9 	bl	8001510 <turnOffLEDAll>
			statusHorizontal = GREEN_MODIFY;
 800091e:	4b69      	ldr	r3, [pc, #420]	; (8000ac4 <fsm_setting+0x4b8>)
 8000920:	2208      	movs	r2, #8
 8000922:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(1))
 8000924:	2001      	movs	r0, #1
 8000926:	f000 f96d 	bl	8000c04 <is_button_pressed>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	f000 80be 	beq.w	8000aae <fsm_setting+0x4a2>
		{
			statusHorizontal = GREEN_CHANGE_DURATION;
 8000932:	4b64      	ldr	r3, [pc, #400]	; (8000ac4 <fsm_setting+0x4b8>)
 8000934:	2209      	movs	r2, #9
 8000936:	601a      	str	r2, [r3, #0]
		}
		break;
 8000938:	e0b9      	b.n	8000aae <fsm_setting+0x4a2>

	case YELLOW_MODIFY:
		blinkyLED1s(YELLOW);
 800093a:	2014      	movs	r0, #20
 800093c:	f000 fd98 	bl	8001470 <blinkyLED1s>
		init7SEGBuffer_setting(YELLOW_MODIFY, yellow_duration);
 8000940:	4b61      	ldr	r3, [pc, #388]	; (8000ac8 <fsm_setting+0x4bc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	200b      	movs	r0, #11
 8000948:	f000 fc72 	bl	8001230 <init7SEGBuffer_setting>
		if(is_button_pressed(0))
 800094c:	2000      	movs	r0, #0
 800094e:	f000 f959 	bl	8000c04 <is_button_pressed>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d005      	beq.n	8000964 <fsm_setting+0x358>
		{
			statusHorizontal = INIT;
 8000958:	4b5a      	ldr	r3, [pc, #360]	; (8000ac4 <fsm_setting+0x4b8>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
			statusVertical = INIT;
 800095e:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <fsm_setting+0x4c0>)
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(1))
 8000964:	2001      	movs	r0, #1
 8000966:	f000 f94d 	bl	8000c04 <is_button_pressed>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <fsm_setting+0x36a>
		{
			statusHorizontal = YELLOW_CHANGE_DURATION;
 8000970:	4b54      	ldr	r3, [pc, #336]	; (8000ac4 <fsm_setting+0x4b8>)
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
		}

		if(timer_7seg_flag)
 8000976:	4b56      	ldr	r3, [pc, #344]	; (8000ad0 <fsm_setting+0x4c4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 8099 	beq.w	8000ab2 <fsm_setting+0x4a6>
		{
			setTimer7SEG(50);
 8000980:	2032      	movs	r0, #50	; 0x32
 8000982:	f000 ffcd 	bl	8001920 <setTimer7SEG>
			display7SEG(led7SEGBuffer_setting[index_7SEG_buffer]);
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <fsm_setting+0x4c8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a53      	ldr	r2, [pc, #332]	; (8000ad8 <fsm_setting+0x4cc>)
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f955 	bl	8000c40 <display7SEG>
			enable7SEGat(index_enable);
 8000996:	4b51      	ldr	r3, [pc, #324]	; (8000adc <fsm_setting+0x4d0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fb5a 	bl	8001054 <enable7SEGat>
			index_enable = (index_enable + 1) % 4;
 80009a0:	4b4e      	ldr	r3, [pc, #312]	; (8000adc <fsm_setting+0x4d0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	425a      	negs	r2, r3
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	f002 0203 	and.w	r2, r2, #3
 80009b0:	bf58      	it	pl
 80009b2:	4253      	negpl	r3, r2
 80009b4:	4a49      	ldr	r2, [pc, #292]	; (8000adc <fsm_setting+0x4d0>)
 80009b6:	6013      	str	r3, [r2, #0]
			index_7SEG_buffer = (index_7SEG_buffer + 1) % 4;
 80009b8:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <fsm_setting+0x4c8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	425a      	negs	r2, r3
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	f002 0203 	and.w	r2, r2, #3
 80009c8:	bf58      	it	pl
 80009ca:	4253      	negpl	r3, r2
 80009cc:	4a41      	ldr	r2, [pc, #260]	; (8000ad4 <fsm_setting+0x4c8>)
 80009ce:	6013      	str	r3, [r2, #0]
		}

		break;
 80009d0:	e06f      	b.n	8000ab2 <fsm_setting+0x4a6>
	case YELLOW_CHANGE_DURATION:
		if(is_button_pressed(1))
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 f916 	bl	8000c04 <is_button_pressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d007      	beq.n	80009ee <fsm_setting+0x3e2>
		{
			set7SEGBuffer_setting(yellow_duration++);
 80009de:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <fsm_setting+0x4bc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	4938      	ldr	r1, [pc, #224]	; (8000ac8 <fsm_setting+0x4bc>)
 80009e6:	600a      	str	r2, [r1, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 fb05 	bl	8000ff8 <set7SEGBuffer_setting>
		}
		if(is_button_pressed(2))
 80009ee:	2002      	movs	r0, #2
 80009f0:	f000 f908 	bl	8000c04 <is_button_pressed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <fsm_setting+0x3f4>
		{
			statusHorizontal = YELLOW_SET_DURATION;
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <fsm_setting+0x4b8>)
 80009fc:	220d      	movs	r2, #13
 80009fe:	601a      	str	r2, [r3, #0]
		}
		if(timer_7seg_flag)
 8000a00:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <fsm_setting+0x4c4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d056      	beq.n	8000ab6 <fsm_setting+0x4aa>
		{
			setTimer7SEG(50);
 8000a08:	2032      	movs	r0, #50	; 0x32
 8000a0a:	f000 ff89 	bl	8001920 <setTimer7SEG>
			display7SEG(led7SEGBuffer_setting[index_7SEG_buffer]);
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <fsm_setting+0x4c8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <fsm_setting+0x4cc>)
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f911 	bl	8000c40 <display7SEG>
			enable7SEGat(index_enable);
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <fsm_setting+0x4d0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fb16 	bl	8001054 <enable7SEGat>
			index_enable = (index_enable + 1) % 4;
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <fsm_setting+0x4d0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	425a      	negs	r2, r3
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	f002 0203 	and.w	r2, r2, #3
 8000a38:	bf58      	it	pl
 8000a3a:	4253      	negpl	r3, r2
 8000a3c:	4a27      	ldr	r2, [pc, #156]	; (8000adc <fsm_setting+0x4d0>)
 8000a3e:	6013      	str	r3, [r2, #0]
			index_7SEG_buffer = (index_7SEG_buffer + 1) % 4;
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <fsm_setting+0x4c8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	425a      	negs	r2, r3
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	bf58      	it	pl
 8000a52:	4253      	negpl	r3, r2
 8000a54:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <fsm_setting+0x4c8>)
 8000a56:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a58:	e02d      	b.n	8000ab6 <fsm_setting+0x4aa>
	case YELLOW_SET_DURATION:
		if(yellow_duration != 0)
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <fsm_setting+0x4bc>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d008      	beq.n	8000a74 <fsm_setting+0x468>
		{
			setDurationBuffer(2, yellow_duration);
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <fsm_setting+0x4bc>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4619      	mov	r1, r3
 8000a68:	2002      	movs	r0, #2
 8000a6a:	f000 fcc3 	bl	80013f4 <setDurationBuffer>
			yellow_duration = 0;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <fsm_setting+0x4bc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(0))
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 f8c5 	bl	8000c04 <is_button_pressed>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <fsm_setting+0x47a>
		{
			statusHorizontal = YELLOW_MODIFY;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <fsm_setting+0x4b8>)
 8000a82:	220b      	movs	r2, #11
 8000a84:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(1))
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 f8bc 	bl	8000c04 <is_button_pressed>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d013      	beq.n	8000aba <fsm_setting+0x4ae>
		{
			statusHorizontal = YELLOW_CHANGE_DURATION;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <fsm_setting+0x4b8>)
 8000a94:	220c      	movs	r2, #12
 8000a96:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a98:	e00f      	b.n	8000aba <fsm_setting+0x4ae>
		break;
 8000a9a:	bf00      	nop
 8000a9c:	e00e      	b.n	8000abc <fsm_setting+0x4b0>
		break;
 8000a9e:	bf00      	nop
 8000aa0:	e00c      	b.n	8000abc <fsm_setting+0x4b0>
		break;
 8000aa2:	bf00      	nop
 8000aa4:	e00a      	b.n	8000abc <fsm_setting+0x4b0>
		break;
 8000aa6:	bf00      	nop
 8000aa8:	e008      	b.n	8000abc <fsm_setting+0x4b0>
		break;
 8000aaa:	bf00      	nop
 8000aac:	e006      	b.n	8000abc <fsm_setting+0x4b0>
		break;
 8000aae:	bf00      	nop
 8000ab0:	e004      	b.n	8000abc <fsm_setting+0x4b0>
		break;
 8000ab2:	bf00      	nop
 8000ab4:	e002      	b.n	8000abc <fsm_setting+0x4b0>
		break;
 8000ab6:	bf00      	nop
 8000ab8:	e000      	b.n	8000abc <fsm_setting+0x4b0>
		break;
 8000aba:	bf00      	nop
	}
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000054 	.word	0x20000054
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000058 	.word	0x20000058
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	2000007c 	.word	0x2000007c
 8000ad4:	2000005c 	.word	0x2000005c
 8000ad8:	20000040 	.word	0x20000040
 8000adc:	20000060 	.word	0x20000060

08000ae0 <button_reading>:
//static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value after the button is pressed more than 1 second .
//static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	e076      	b.n	8000bda <button_reading+0xfa>
	{
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 8000aec:	4a3f      	ldr	r2, [pc, #252]	; (8000bec <button_reading+0x10c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	7819      	ldrb	r1, [r3, #0]
 8000af4:	4a3e      	ldr	r2, [pc, #248]	; (8000bf0 <button_reading+0x110>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	460a      	mov	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000afe:	4a3d      	ldr	r2, [pc, #244]	; (8000bf4 <button_reading+0x114>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	7819      	ldrb	r1, [r3, #0]
 8000b06:	4a39      	ldr	r2, [pc, #228]	; (8000bec <button_reading+0x10c>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
		switch(i)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d01d      	beq.n	8000b52 <button_reading+0x72>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	dc24      	bgt.n	8000b66 <button_reading+0x86>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <button_reading+0x4a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d00a      	beq.n	8000b3e <button_reading+0x5e>
			break;
		case 2:
			debounceButtonBuffer2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
			break;
		default:
			break;
 8000b28:	e01d      	b.n	8000b66 <button_reading+0x86>
			debounceButtonBuffer2[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2e:	4832      	ldr	r0, [pc, #200]	; (8000bf8 <button_reading+0x118>)
 8000b30:	f001 faac 	bl	800208c <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b2e      	ldr	r3, [pc, #184]	; (8000bf4 <button_reading+0x114>)
 8000b3a:	701a      	strb	r2, [r3, #0]
			break;
 8000b3c:	e014      	b.n	8000b68 <button_reading+0x88>
			debounceButtonBuffer2[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b42:	482d      	ldr	r0, [pc, #180]	; (8000bf8 <button_reading+0x118>)
 8000b44:	f001 faa2 	bl	800208c <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <button_reading+0x114>)
 8000b4e:	705a      	strb	r2, [r3, #1]
			break;
 8000b50:	e00a      	b.n	8000b68 <button_reading+0x88>
			debounceButtonBuffer2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b56:	4828      	ldr	r0, [pc, #160]	; (8000bf8 <button_reading+0x118>)
 8000b58:	f001 fa98 	bl	800208c <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <button_reading+0x114>)
 8000b62:	709a      	strb	r2, [r3, #2]
			break;
 8000b64:	e000      	b.n	8000b68 <button_reading+0x88>
			break;
 8000b66:	bf00      	nop
		}

		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]))
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <button_reading+0x110>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	491e      	ldr	r1, [pc, #120]	; (8000bec <button_reading+0x10c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	440b      	add	r3, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d12b      	bne.n	8000bd4 <button_reading+0xf4>
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <button_reading+0x10c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	491b      	ldr	r1, [pc, #108]	; (8000bf4 <button_reading+0x114>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	440b      	add	r3, r1
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d121      	bne.n	8000bd4 <button_reading+0xf4>
		{
			if(debounceButtonBuffer3[i] != debounceButtonBuffer2[i])
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <button_reading+0x11c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	781a      	ldrb	r2, [r3, #0]
 8000b98:	4916      	ldr	r1, [pc, #88]	; (8000bf4 <button_reading+0x114>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	440b      	add	r3, r1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d017      	beq.n	8000bd4 <button_reading+0xf4>
			{
				debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <button_reading+0x114>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	7819      	ldrb	r1, [r3, #0]
 8000bac:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <button_reading+0x11c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	460a      	mov	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i] == BUTTON_IS_PRESSED)
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <button_reading+0x114>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d108      	bne.n	8000bd4 <button_reading+0xf4>
				{
					buttonBuffer[i] = debounceButtonBuffer2[i];
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <button_reading+0x114>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	7819      	ldrb	r1, [r3, #0]
 8000bca:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <button_reading+0x120>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	dd85      	ble.n	8000aec <button_reading+0xc>
//		{
//			counterForButtonPress1s[i] = 0;
//			flagForButtonPress1s[i] = 0;
//		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000068 	.word	0x20000068
 8000bf0:	20000064 	.word	0x20000064
 8000bf4:	2000006c 	.word	0x2000006c
 8000bf8:	40011000 	.word	0x40011000
 8000bfc:	20000070 	.word	0x20000070
 8000c00:	20000014 	.word	0x20000014

08000c04 <is_button_pressed>:
unsigned int is_button_pressed(uint8_t index)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d901      	bls.n	8000c18 <is_button_pressed+0x14>
 8000c14:	2300      	movs	r3, #0
 8000c16:	e00b      	b.n	8000c30 <is_button_pressed+0x2c>
	if(buttonBuffer[index] == BUTTON_IS_PRESSED)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <is_button_pressed+0x38>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d105      	bne.n	8000c2e <is_button_pressed+0x2a>
	{
		buttonBuffer[index] = BUTTON_IS_RELEASED;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <is_button_pressed+0x38>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <is_button_pressed+0x2c>
	}
	return 0;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000014 	.word	0x20000014

08000c40 <display7SEG>:
 *      Author: Admin
 */
#include "led_7segment.h"

void display7SEG(int num)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b09      	cmp	r3, #9
 8000c4c:	f200 818a 	bhi.w	8000f64 <display7SEG+0x324>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <display7SEG+0x18>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000ccb 	.word	0x08000ccb
 8000c60:	08000d15 	.word	0x08000d15
 8000c64:	08000d5f 	.word	0x08000d5f
 8000c68:	08000da9 	.word	0x08000da9
 8000c6c:	08000df3 	.word	0x08000df3
 8000c70:	08000e3d 	.word	0x08000e3d
 8000c74:	08000e87 	.word	0x08000e87
 8000c78:	08000ed1 	.word	0x08000ed1
 8000c7c:	08000f1b 	.word	0x08000f1b

	switch(num)
	{
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2104      	movs	r1, #4
 8000c84:	48ba      	ldr	r0, [pc, #744]	; (8000f70 <display7SEG+0x330>)
 8000c86:	f001 fa18 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	48b8      	ldr	r0, [pc, #736]	; (8000f70 <display7SEG+0x330>)
 8000c90:	f001 fa13 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2110      	movs	r1, #16
 8000c98:	48b5      	ldr	r0, [pc, #724]	; (8000f70 <display7SEG+0x330>)
 8000c9a:	f001 fa0e 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	48b3      	ldr	r0, [pc, #716]	; (8000f70 <display7SEG+0x330>)
 8000ca4:	f001 fa09 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	48b0      	ldr	r0, [pc, #704]	; (8000f70 <display7SEG+0x330>)
 8000cae:	f001 fa04 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	48ae      	ldr	r0, [pc, #696]	; (8000f70 <display7SEG+0x330>)
 8000cb8:	f001 f9ff 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc2:	48ab      	ldr	r0, [pc, #684]	; (8000f70 <display7SEG+0x330>)
 8000cc4:	f001 f9f9 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000cc8:	e14d      	b.n	8000f66 <display7SEG+0x326>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2104      	movs	r1, #4
 8000cce:	48a8      	ldr	r0, [pc, #672]	; (8000f70 <display7SEG+0x330>)
 8000cd0:	f001 f9f3 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	48a5      	ldr	r0, [pc, #660]	; (8000f70 <display7SEG+0x330>)
 8000cda:	f001 f9ee 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	48a3      	ldr	r0, [pc, #652]	; (8000f70 <display7SEG+0x330>)
 8000ce4:	f001 f9e9 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2120      	movs	r1, #32
 8000cec:	48a0      	ldr	r0, [pc, #640]	; (8000f70 <display7SEG+0x330>)
 8000cee:	f001 f9e4 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	489e      	ldr	r0, [pc, #632]	; (8000f70 <display7SEG+0x330>)
 8000cf8:	f001 f9df 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	489b      	ldr	r0, [pc, #620]	; (8000f70 <display7SEG+0x330>)
 8000d02:	f001 f9da 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0c:	4898      	ldr	r0, [pc, #608]	; (8000f70 <display7SEG+0x330>)
 8000d0e:	f001 f9d4 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000d12:	e128      	b.n	8000f66 <display7SEG+0x326>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2104      	movs	r1, #4
 8000d18:	4895      	ldr	r0, [pc, #596]	; (8000f70 <display7SEG+0x330>)
 8000d1a:	f001 f9ce 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2108      	movs	r1, #8
 8000d22:	4893      	ldr	r0, [pc, #588]	; (8000f70 <display7SEG+0x330>)
 8000d24:	f001 f9c9 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4890      	ldr	r0, [pc, #576]	; (8000f70 <display7SEG+0x330>)
 8000d2e:	f001 f9c4 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2120      	movs	r1, #32
 8000d36:	488e      	ldr	r0, [pc, #568]	; (8000f70 <display7SEG+0x330>)
 8000d38:	f001 f9bf 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	488b      	ldr	r0, [pc, #556]	; (8000f70 <display7SEG+0x330>)
 8000d42:	f001 f9ba 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	4889      	ldr	r0, [pc, #548]	; (8000f70 <display7SEG+0x330>)
 8000d4c:	f001 f9b5 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d56:	4886      	ldr	r0, [pc, #536]	; (8000f70 <display7SEG+0x330>)
 8000d58:	f001 f9af 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000d5c:	e103      	b.n	8000f66 <display7SEG+0x326>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2104      	movs	r1, #4
 8000d62:	4883      	ldr	r0, [pc, #524]	; (8000f70 <display7SEG+0x330>)
 8000d64:	f001 f9a9 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2108      	movs	r1, #8
 8000d6c:	4880      	ldr	r0, [pc, #512]	; (8000f70 <display7SEG+0x330>)
 8000d6e:	f001 f9a4 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2110      	movs	r1, #16
 8000d76:	487e      	ldr	r0, [pc, #504]	; (8000f70 <display7SEG+0x330>)
 8000d78:	f001 f99f 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2120      	movs	r1, #32
 8000d80:	487b      	ldr	r0, [pc, #492]	; (8000f70 <display7SEG+0x330>)
 8000d82:	f001 f99a 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	4879      	ldr	r0, [pc, #484]	; (8000f70 <display7SEG+0x330>)
 8000d8c:	f001 f995 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	4876      	ldr	r0, [pc, #472]	; (8000f70 <display7SEG+0x330>)
 8000d96:	f001 f990 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da0:	4873      	ldr	r0, [pc, #460]	; (8000f70 <display7SEG+0x330>)
 8000da2:	f001 f98a 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000da6:	e0de      	b.n	8000f66 <display7SEG+0x326>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2104      	movs	r1, #4
 8000dac:	4870      	ldr	r0, [pc, #448]	; (8000f70 <display7SEG+0x330>)
 8000dae:	f001 f984 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2108      	movs	r1, #8
 8000db6:	486e      	ldr	r0, [pc, #440]	; (8000f70 <display7SEG+0x330>)
 8000db8:	f001 f97f 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	486b      	ldr	r0, [pc, #428]	; (8000f70 <display7SEG+0x330>)
 8000dc2:	f001 f97a 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2120      	movs	r1, #32
 8000dca:	4869      	ldr	r0, [pc, #420]	; (8000f70 <display7SEG+0x330>)
 8000dcc:	f001 f975 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2140      	movs	r1, #64	; 0x40
 8000dd4:	4866      	ldr	r0, [pc, #408]	; (8000f70 <display7SEG+0x330>)
 8000dd6:	f001 f970 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	4864      	ldr	r0, [pc, #400]	; (8000f70 <display7SEG+0x330>)
 8000de0:	f001 f96b 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dea:	4861      	ldr	r0, [pc, #388]	; (8000f70 <display7SEG+0x330>)
 8000dec:	f001 f965 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000df0:	e0b9      	b.n	8000f66 <display7SEG+0x326>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2104      	movs	r1, #4
 8000df6:	485e      	ldr	r0, [pc, #376]	; (8000f70 <display7SEG+0x330>)
 8000df8:	f001 f95f 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2108      	movs	r1, #8
 8000e00:	485b      	ldr	r0, [pc, #364]	; (8000f70 <display7SEG+0x330>)
 8000e02:	f001 f95a 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	4859      	ldr	r0, [pc, #356]	; (8000f70 <display7SEG+0x330>)
 8000e0c:	f001 f955 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2120      	movs	r1, #32
 8000e14:	4856      	ldr	r0, [pc, #344]	; (8000f70 <display7SEG+0x330>)
 8000e16:	f001 f950 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2140      	movs	r1, #64	; 0x40
 8000e1e:	4854      	ldr	r0, [pc, #336]	; (8000f70 <display7SEG+0x330>)
 8000e20:	f001 f94b 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	4851      	ldr	r0, [pc, #324]	; (8000f70 <display7SEG+0x330>)
 8000e2a:	f001 f946 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e34:	484e      	ldr	r0, [pc, #312]	; (8000f70 <display7SEG+0x330>)
 8000e36:	f001 f940 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000e3a:	e094      	b.n	8000f66 <display7SEG+0x326>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2104      	movs	r1, #4
 8000e40:	484b      	ldr	r0, [pc, #300]	; (8000f70 <display7SEG+0x330>)
 8000e42:	f001 f93a 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2108      	movs	r1, #8
 8000e4a:	4849      	ldr	r0, [pc, #292]	; (8000f70 <display7SEG+0x330>)
 8000e4c:	f001 f935 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2110      	movs	r1, #16
 8000e54:	4846      	ldr	r0, [pc, #280]	; (8000f70 <display7SEG+0x330>)
 8000e56:	f001 f930 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	4844      	ldr	r0, [pc, #272]	; (8000f70 <display7SEG+0x330>)
 8000e60:	f001 f92b 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2140      	movs	r1, #64	; 0x40
 8000e68:	4841      	ldr	r0, [pc, #260]	; (8000f70 <display7SEG+0x330>)
 8000e6a:	f001 f926 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	483f      	ldr	r0, [pc, #252]	; (8000f70 <display7SEG+0x330>)
 8000e74:	f001 f921 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	483c      	ldr	r0, [pc, #240]	; (8000f70 <display7SEG+0x330>)
 8000e80:	f001 f91b 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000e84:	e06f      	b.n	8000f66 <display7SEG+0x326>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2104      	movs	r1, #4
 8000e8a:	4839      	ldr	r0, [pc, #228]	; (8000f70 <display7SEG+0x330>)
 8000e8c:	f001 f915 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2108      	movs	r1, #8
 8000e94:	4836      	ldr	r0, [pc, #216]	; (8000f70 <display7SEG+0x330>)
 8000e96:	f001 f910 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	4834      	ldr	r0, [pc, #208]	; (8000f70 <display7SEG+0x330>)
 8000ea0:	f001 f90b 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2120      	movs	r1, #32
 8000ea8:	4831      	ldr	r0, [pc, #196]	; (8000f70 <display7SEG+0x330>)
 8000eaa:	f001 f906 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2140      	movs	r1, #64	; 0x40
 8000eb2:	482f      	ldr	r0, [pc, #188]	; (8000f70 <display7SEG+0x330>)
 8000eb4:	f001 f901 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	482c      	ldr	r0, [pc, #176]	; (8000f70 <display7SEG+0x330>)
 8000ebe:	f001 f8fc 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec8:	4829      	ldr	r0, [pc, #164]	; (8000f70 <display7SEG+0x330>)
 8000eca:	f001 f8f6 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000ece:	e04a      	b.n	8000f66 <display7SEG+0x326>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4826      	ldr	r0, [pc, #152]	; (8000f70 <display7SEG+0x330>)
 8000ed6:	f001 f8f0 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2108      	movs	r1, #8
 8000ede:	4824      	ldr	r0, [pc, #144]	; (8000f70 <display7SEG+0x330>)
 8000ee0:	f001 f8eb 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	4821      	ldr	r0, [pc, #132]	; (8000f70 <display7SEG+0x330>)
 8000eea:	f001 f8e6 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	481f      	ldr	r0, [pc, #124]	; (8000f70 <display7SEG+0x330>)
 8000ef4:	f001 f8e1 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <display7SEG+0x330>)
 8000efe:	f001 f8dc 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	481a      	ldr	r0, [pc, #104]	; (8000f70 <display7SEG+0x330>)
 8000f08:	f001 f8d7 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f12:	4817      	ldr	r0, [pc, #92]	; (8000f70 <display7SEG+0x330>)
 8000f14:	f001 f8d1 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000f18:	e025      	b.n	8000f66 <display7SEG+0x326>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <display7SEG+0x330>)
 8000f20:	f001 f8cb 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2108      	movs	r1, #8
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <display7SEG+0x330>)
 8000f2a:	f001 f8c6 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <display7SEG+0x330>)
 8000f34:	f001 f8c1 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <display7SEG+0x330>)
 8000f3e:	f001 f8bc 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <display7SEG+0x330>)
 8000f48:	f001 f8b7 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <display7SEG+0x330>)
 8000f52:	f001 f8b2 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <display7SEG+0x330>)
 8000f5e:	f001 f8ac 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8000f62:	e000      	b.n	8000f66 <display7SEG+0x326>
		default:
			break;
 8000f64:	bf00      	nop
	}
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40010800 	.word	0x40010800

08000f74 <turnOffAll7SEG>:

void turnOffAll7SEG()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	481c      	ldr	r0, [pc, #112]	; (8000ff0 <turnOffAll7SEG+0x7c>)
 8000f7e:	f001 f89c 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2108      	movs	r1, #8
 8000f86:	481a      	ldr	r0, [pc, #104]	; (8000ff0 <turnOffAll7SEG+0x7c>)
 8000f88:	f001 f897 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <turnOffAll7SEG+0x7c>)
 8000f92:	f001 f892 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2120      	movs	r1, #32
 8000f9a:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <turnOffAll7SEG+0x7c>)
 8000f9c:	f001 f88d 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <turnOffAll7SEG+0x7c>)
 8000fa6:	f001 f888 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <turnOffAll7SEG+0x7c>)
 8000fb0:	f001 f883 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fba:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <turnOffAll7SEG+0x7c>)
 8000fbc:	f001 f87d 	bl	80020ba <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2140      	movs	r1, #64	; 0x40
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <turnOffAll7SEG+0x80>)
 8000fc6:	f001 f878 	bl	80020ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <turnOffAll7SEG+0x80>)
 8000fd0:	f001 f873 	bl	80020ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <turnOffAll7SEG+0x80>)
 8000fdc:	f001 f86d 	bl	80020ba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe6:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <turnOffAll7SEG+0x80>)
 8000fe8:	f001 f867 	bl	80020ba <HAL_GPIO_WritePin>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40010c00 	.word	0x40010c00

08000ff8 <set7SEGBuffer_setting>:

void set7SEGBuffer_setting(int duration)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if(duration <= 9)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b09      	cmp	r3, #9
 8001004:	dc06      	bgt.n	8001014 <set7SEGBuffer_setting+0x1c>
	{
		led7SEGBuffer_setting[0] = 0;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <set7SEGBuffer_setting+0x54>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		led7SEGBuffer_setting[1] = duration;
 800100c:	4a0f      	ldr	r2, [pc, #60]	; (800104c <set7SEGBuffer_setting+0x54>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6053      	str	r3, [r2, #4]
	else
	{
		led7SEGBuffer_setting[0] = duration / 10;
		led7SEGBuffer_setting[1] = duration % 10;
	}
}
 8001012:	e016      	b.n	8001042 <set7SEGBuffer_setting+0x4a>
		led7SEGBuffer_setting[0] = duration / 10;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <set7SEGBuffer_setting+0x58>)
 8001018:	fb82 1203 	smull	r1, r2, r2, r3
 800101c:	1092      	asrs	r2, r2, #2
 800101e:	17db      	asrs	r3, r3, #31
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <set7SEGBuffer_setting+0x54>)
 8001024:	6013      	str	r3, [r2, #0]
		led7SEGBuffer_setting[1] = duration % 10;
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <set7SEGBuffer_setting+0x58>)
 800102a:	fb83 2301 	smull	r2, r3, r3, r1
 800102e:	109a      	asrs	r2, r3, #2
 8001030:	17cb      	asrs	r3, r1, #31
 8001032:	1ad2      	subs	r2, r2, r3
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	1aca      	subs	r2, r1, r3
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <set7SEGBuffer_setting+0x54>)
 8001040:	605a      	str	r2, [r3, #4]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	20000040 	.word	0x20000040
 8001050:	66666667 	.word	0x66666667

08001054 <enable7SEGat>:

void enable7SEGat(int index)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2140      	movs	r1, #64	; 0x40
 8001060:	4820      	ldr	r0, [pc, #128]	; (80010e4 <enable7SEGat+0x90>)
 8001062:	f001 f82a 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	481e      	ldr	r0, [pc, #120]	; (80010e4 <enable7SEGat+0x90>)
 800106c:	f001 f825 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	481b      	ldr	r0, [pc, #108]	; (80010e4 <enable7SEGat+0x90>)
 8001078:	f001 f81f 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001082:	4818      	ldr	r0, [pc, #96]	; (80010e4 <enable7SEGat+0x90>)
 8001084:	f001 f819 	bl	80020ba <HAL_GPIO_WritePin>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d824      	bhi.n	80010d8 <enable7SEGat+0x84>
 800108e:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <enable7SEGat+0x40>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	080010a5 	.word	0x080010a5
 8001098:	080010b1 	.word	0x080010b1
 800109c:	080010bd 	.word	0x080010bd
 80010a0:	080010cb 	.word	0x080010cb
	switch(index)
	{
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	480e      	ldr	r0, [pc, #56]	; (80010e4 <enable7SEGat+0x90>)
 80010aa:	f001 f806 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 80010ae:	e014      	b.n	80010da <enable7SEGat+0x86>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <enable7SEGat+0x90>)
 80010b6:	f001 f800 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 80010ba:	e00e      	b.n	80010da <enable7SEGat+0x86>
	case 2:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <enable7SEGat+0x90>)
 80010c4:	f000 fff9 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 80010c8:	e007      	b.n	80010da <enable7SEGat+0x86>
	case 3:
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <enable7SEGat+0x90>)
 80010d2:	f000 fff2 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 80010d6:	e000      	b.n	80010da <enable7SEGat+0x86>
	default:
		break;
 80010d8:	bf00      	nop
	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <runClock>:

void runClock()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	if(timer_clock_flag)
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <runClock+0x94>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d040      	beq.n	8001176 <runClock+0x8e>
	{
		setTimerClock(100);
 80010f4:	2064      	movs	r0, #100	; 0x64
 80010f6:	f000 fc3b 	bl	8001970 <setTimerClock>
		led7SEGBuffer[1]--;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <runClock+0x98>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <runClock+0x98>)
 8001102:	6053      	str	r3, [r2, #4]
		led7SEGBuffer[3]--;
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <runClock+0x98>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	3b01      	subs	r3, #1
 800110a:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <runClock+0x98>)
 800110c:	60d3      	str	r3, [r2, #12]
		if(led7SEGBuffer[0] <= 0 && led7SEGBuffer[1] <= 0)
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <runClock+0x98>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dc06      	bgt.n	8001124 <runClock+0x3c>
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <runClock+0x98>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	dc02      	bgt.n	8001124 <runClock+0x3c>
		{
			updateBuffer();
 800111e:	f000 f831 	bl	8001184 <updateBuffer>
 8001122:	e00b      	b.n	800113c <runClock+0x54>
		}
		else
		{
			if(led7SEGBuffer[1] <= 0)
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <runClock+0x98>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	dc07      	bgt.n	800113c <runClock+0x54>
			{
				led7SEGBuffer[0]--;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <runClock+0x98>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3b01      	subs	r3, #1
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <runClock+0x98>)
 8001134:	6013      	str	r3, [r2, #0]
				led7SEGBuffer[1] = 9;
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <runClock+0x98>)
 8001138:	2209      	movs	r2, #9
 800113a:	605a      	str	r2, [r3, #4]
			}
		}

		if(led7SEGBuffer[2] <= 0 && led7SEGBuffer[3] <= 0)
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <runClock+0x98>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	dc0c      	bgt.n	800115e <runClock+0x76>
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <runClock+0x98>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dc08      	bgt.n	800115e <runClock+0x76>
		{
			led7SEGBuffer[2] = led7SEGBuffer[0];
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <runClock+0x98>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <runClock+0x98>)
 8001152:	6093      	str	r3, [r2, #8]
			led7SEGBuffer[3] = led7SEGBuffer[1];
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <runClock+0x98>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <runClock+0x98>)
 800115a:	60d3      	str	r3, [r2, #12]
				led7SEGBuffer[2]--;
				led7SEGBuffer[3] = 9;
			}
		}
	}
}
 800115c:	e00b      	b.n	8001176 <runClock+0x8e>
			if(led7SEGBuffer[3] <= 0)
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <runClock+0x98>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	dc07      	bgt.n	8001176 <runClock+0x8e>
				led7SEGBuffer[2]--;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <runClock+0x98>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <runClock+0x98>)
 800116e:	6093      	str	r3, [r2, #8]
				led7SEGBuffer[3] = 9;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <runClock+0x98>)
 8001172:	2209      	movs	r2, #9
 8001174:	60da      	str	r2, [r3, #12]
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000084 	.word	0x20000084
 8001180:	2000009c 	.word	0x2000009c

08001184 <updateBuffer>:
void updateBuffer()
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	if(ledDurationBuffer[0] <= 9)
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <updateBuffer+0xa0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b09      	cmp	r3, #9
 800118e:	dc07      	bgt.n	80011a0 <updateBuffer+0x1c>
	{
		led7SEGBuffer[0] = 0;
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <updateBuffer+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
		led7SEGBuffer[1] = ledDurationBuffer[0];
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <updateBuffer+0xa0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a23      	ldr	r2, [pc, #140]	; (8001228 <updateBuffer+0xa4>)
 800119c:	6053      	str	r3, [r2, #4]
 800119e:	e018      	b.n	80011d2 <updateBuffer+0x4e>
	}
	else
	{
		led7SEGBuffer[0] = ledDurationBuffer[0] / 10;
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <updateBuffer+0xa0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <updateBuffer+0xa8>)
 80011a6:	fb82 1203 	smull	r1, r2, r2, r3
 80011aa:	1092      	asrs	r2, r2, #2
 80011ac:	17db      	asrs	r3, r3, #31
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <updateBuffer+0xa4>)
 80011b2:	6013      	str	r3, [r2, #0]
		led7SEGBuffer[1] = ledDurationBuffer[0] % 10;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <updateBuffer+0xa0>)
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <updateBuffer+0xa8>)
 80011ba:	fb83 2301 	smull	r2, r3, r3, r1
 80011be:	109a      	asrs	r2, r3, #2
 80011c0:	17cb      	asrs	r3, r1, #31
 80011c2:	1ad2      	subs	r2, r2, r3
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	1aca      	subs	r2, r1, r3
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <updateBuffer+0xa4>)
 80011d0:	605a      	str	r2, [r3, #4]
	}

	if(ledDurationBuffer[1] <= 9)
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <updateBuffer+0xa0>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b09      	cmp	r3, #9
 80011d8:	dc07      	bgt.n	80011ea <updateBuffer+0x66>
	{
		led7SEGBuffer[2] = 0;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <updateBuffer+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
		led7SEGBuffer[3] = ledDurationBuffer[1];
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <updateBuffer+0xa0>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4a10      	ldr	r2, [pc, #64]	; (8001228 <updateBuffer+0xa4>)
 80011e6:	60d3      	str	r3, [r2, #12]
	else
	{
		led7SEGBuffer[2] = ledDurationBuffer[1] / 10;
		led7SEGBuffer[3] = ledDurationBuffer[1] % 10;
	}
}
 80011e8:	e018      	b.n	800121c <updateBuffer+0x98>
		led7SEGBuffer[2] = ledDurationBuffer[1] / 10;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <updateBuffer+0xa0>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4a0f      	ldr	r2, [pc, #60]	; (800122c <updateBuffer+0xa8>)
 80011f0:	fb82 1203 	smull	r1, r2, r2, r3
 80011f4:	1092      	asrs	r2, r2, #2
 80011f6:	17db      	asrs	r3, r3, #31
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <updateBuffer+0xa4>)
 80011fc:	6093      	str	r3, [r2, #8]
		led7SEGBuffer[3] = ledDurationBuffer[1] % 10;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <updateBuffer+0xa0>)
 8001200:	6859      	ldr	r1, [r3, #4]
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <updateBuffer+0xa8>)
 8001204:	fb83 2301 	smull	r2, r3, r3, r1
 8001208:	109a      	asrs	r2, r3, #2
 800120a:	17cb      	asrs	r3, r1, #31
 800120c:	1ad2      	subs	r2, r2, r3
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1aca      	subs	r2, r1, r3
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <updateBuffer+0xa4>)
 800121a:	60da      	str	r2, [r3, #12]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000008 	.word	0x20000008
 8001228:	2000009c 	.word	0x2000009c
 800122c:	66666667 	.word	0x66666667

08001230 <init7SEGBuffer_setting>:

void init7SEGBuffer_setting(int mode, int duration)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	if(duration <= 9)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	dc06      	bgt.n	800124e <init7SEGBuffer_setting+0x1e>
	{
		led7SEGBuffer_setting[0] = 0;
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
		led7SEGBuffer_setting[1] = duration;
 8001246:	4a21      	ldr	r2, [pc, #132]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	6053      	str	r3, [r2, #4]
 800124c:	e016      	b.n	800127c <init7SEGBuffer_setting+0x4c>
	}
	else
	{
		led7SEGBuffer_setting[0] = duration / 10;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	4a1f      	ldr	r2, [pc, #124]	; (80012d0 <init7SEGBuffer_setting+0xa0>)
 8001252:	fb82 1203 	smull	r1, r2, r2, r3
 8001256:	1092      	asrs	r2, r2, #2
 8001258:	17db      	asrs	r3, r3, #31
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 800125e:	6013      	str	r3, [r2, #0]
		led7SEGBuffer_setting[1] = duration % 10;
 8001260:	6839      	ldr	r1, [r7, #0]
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <init7SEGBuffer_setting+0xa0>)
 8001264:	fb83 2301 	smull	r2, r3, r3, r1
 8001268:	109a      	asrs	r2, r3, #2
 800126a:	17cb      	asrs	r3, r1, #31
 800126c:	1ad2      	subs	r2, r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	1aca      	subs	r2, r1, r3
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 800127a:	605a      	str	r2, [r3, #4]
	}
	switch(mode)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b0b      	cmp	r3, #11
 8001280:	d010      	beq.n	80012a4 <init7SEGBuffer_setting+0x74>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0b      	cmp	r3, #11
 8001286:	dc1b      	bgt.n	80012c0 <init7SEGBuffer_setting+0x90>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b05      	cmp	r3, #5
 800128c:	d003      	beq.n	8001296 <init7SEGBuffer_setting+0x66>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b08      	cmp	r3, #8
 8001292:	d00e      	beq.n	80012b2 <init7SEGBuffer_setting+0x82>
	case GREEN_MODIFY:
		led7SEGBuffer_setting[2] = 0;
		led7SEGBuffer_setting[3] = 2;
		break;
	default:
		break;
 8001294:	e014      	b.n	80012c0 <init7SEGBuffer_setting+0x90>
		led7SEGBuffer_setting[2] = 0;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
		led7SEGBuffer_setting[3] = 1;
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	60da      	str	r2, [r3, #12]
		break;
 80012a2:	e00e      	b.n	80012c2 <init7SEGBuffer_setting+0x92>
		led7SEGBuffer_setting[2] = 0;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
		led7SEGBuffer_setting[3] = 3;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 80012ac:	2203      	movs	r2, #3
 80012ae:	60da      	str	r2, [r3, #12]
		break;
 80012b0:	e007      	b.n	80012c2 <init7SEGBuffer_setting+0x92>
		led7SEGBuffer_setting[2] = 0;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
		led7SEGBuffer_setting[3] = 2;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <init7SEGBuffer_setting+0x9c>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	60da      	str	r2, [r3, #12]
		break;
 80012be:	e000      	b.n	80012c2 <init7SEGBuffer_setting+0x92>
		break;
 80012c0:	bf00      	nop
	}
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	20000040 	.word	0x20000040
 80012d0:	66666667 	.word	0x66666667

080012d4 <displayLED>:

#include "led_display.h"


void displayLED(int status, int lane)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	switch(lane)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b10      	cmp	r3, #16
 80012e2:	d003      	beq.n	80012ec <displayLED+0x18>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b11      	cmp	r3, #17
 80012e8:	d03f      	beq.n	800136a <displayLED+0x96>
		default:
			break;
		}
		break;
	default:
		break;
 80012ea:	e07d      	b.n	80013e8 <displayLED+0x114>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b14      	cmp	r3, #20
 80012f0:	d029      	beq.n	8001346 <displayLED+0x72>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b14      	cmp	r3, #20
 80012f6:	dc36      	bgt.n	8001366 <displayLED+0x92>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d003      	beq.n	8001306 <displayLED+0x32>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b13      	cmp	r3, #19
 8001302:	d010      	beq.n	8001326 <displayLED+0x52>
			break;
 8001304:	e02f      	b.n	8001366 <displayLED+0x92>
			HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2104      	movs	r1, #4
 800130a:	4839      	ldr	r0, [pc, #228]	; (80013f0 <displayLED+0x11c>)
 800130c:	f000 fed5 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin, RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2101      	movs	r1, #1
 8001314:	4836      	ldr	r0, [pc, #216]	; (80013f0 <displayLED+0x11c>)
 8001316:	f000 fed0 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_VER_GPIO_Port, YELLOW_VER_Pin, RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	4834      	ldr	r0, [pc, #208]	; (80013f0 <displayLED+0x11c>)
 8001320:	f000 fecb 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8001324:	e020      	b.n	8001368 <displayLED+0x94>
			HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2104      	movs	r1, #4
 800132a:	4831      	ldr	r0, [pc, #196]	; (80013f0 <displayLED+0x11c>)
 800132c:	f000 fec5 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin, SET);
 8001330:	2201      	movs	r2, #1
 8001332:	2101      	movs	r1, #1
 8001334:	482e      	ldr	r0, [pc, #184]	; (80013f0 <displayLED+0x11c>)
 8001336:	f000 fec0 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_VER_GPIO_Port, YELLOW_VER_Pin, RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2102      	movs	r1, #2
 800133e:	482c      	ldr	r0, [pc, #176]	; (80013f0 <displayLED+0x11c>)
 8001340:	f000 febb 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8001344:	e010      	b.n	8001368 <displayLED+0x94>
			HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2104      	movs	r1, #4
 800134a:	4829      	ldr	r0, [pc, #164]	; (80013f0 <displayLED+0x11c>)
 800134c:	f000 feb5 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin, RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2101      	movs	r1, #1
 8001354:	4826      	ldr	r0, [pc, #152]	; (80013f0 <displayLED+0x11c>)
 8001356:	f000 feb0 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_VER_GPIO_Port, YELLOW_VER_Pin, SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2102      	movs	r1, #2
 800135e:	4824      	ldr	r0, [pc, #144]	; (80013f0 <displayLED+0x11c>)
 8001360:	f000 feab 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 8001364:	e000      	b.n	8001368 <displayLED+0x94>
			break;
 8001366:	bf00      	nop
		break;
 8001368:	e03e      	b.n	80013e8 <displayLED+0x114>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b14      	cmp	r3, #20
 800136e:	d029      	beq.n	80013c4 <displayLED+0xf0>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b14      	cmp	r3, #20
 8001374:	dc36      	bgt.n	80013e4 <displayLED+0x110>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b12      	cmp	r3, #18
 800137a:	d003      	beq.n	8001384 <displayLED+0xb0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b13      	cmp	r3, #19
 8001380:	d010      	beq.n	80013a4 <displayLED+0xd0>
			break;
 8001382:	e02f      	b.n	80013e4 <displayLED+0x110>
			HAL_GPIO_WritePin(RED_HOZ_GPIO_Port, RED_HOZ_Pin, SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2108      	movs	r1, #8
 8001388:	4819      	ldr	r0, [pc, #100]	; (80013f0 <displayLED+0x11c>)
 800138a:	f000 fe96 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_HOZ_GPIO_Port, GREEN_HOZ_Pin, RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2120      	movs	r1, #32
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <displayLED+0x11c>)
 8001394:	f000 fe91 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_HOZ_GPIO_Port, YELLOW_HOZ_Pin, RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2110      	movs	r1, #16
 800139c:	4814      	ldr	r0, [pc, #80]	; (80013f0 <displayLED+0x11c>)
 800139e:	f000 fe8c 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 80013a2:	e020      	b.n	80013e6 <displayLED+0x112>
			HAL_GPIO_WritePin(RED_HOZ_GPIO_Port, RED_HOZ_Pin, RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2108      	movs	r1, #8
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <displayLED+0x11c>)
 80013aa:	f000 fe86 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_HOZ_GPIO_Port, GREEN_HOZ_Pin, SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2120      	movs	r1, #32
 80013b2:	480f      	ldr	r0, [pc, #60]	; (80013f0 <displayLED+0x11c>)
 80013b4:	f000 fe81 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_HOZ_GPIO_Port, YELLOW_HOZ_Pin, RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2110      	movs	r1, #16
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <displayLED+0x11c>)
 80013be:	f000 fe7c 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 80013c2:	e010      	b.n	80013e6 <displayLED+0x112>
			HAL_GPIO_WritePin(RED_HOZ_GPIO_Port, RED_HOZ_Pin, RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2108      	movs	r1, #8
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <displayLED+0x11c>)
 80013ca:	f000 fe76 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_HOZ_GPIO_Port, GREEN_HOZ_Pin, RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <displayLED+0x11c>)
 80013d4:	f000 fe71 	bl	80020ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_HOZ_GPIO_Port, YELLOW_HOZ_Pin, SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2110      	movs	r1, #16
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <displayLED+0x11c>)
 80013de:	f000 fe6c 	bl	80020ba <HAL_GPIO_WritePin>
			break;
 80013e2:	e000      	b.n	80013e6 <displayLED+0x112>
			break;
 80013e4:	bf00      	nop
		break;
 80013e6:	bf00      	nop
	}
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40010c00 	.word	0x40010c00

080013f4 <setDurationBuffer>:
void setDurationBuffer(int index, int duration)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	ledDurationBuffer[index] = duration;
 80013fe:	4905      	ldr	r1, [pc, #20]	; (8001414 <setDurationBuffer+0x20>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008

08001418 <validateDuration>:

void validateDuration()
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	ledDurationBuffer[0] = (ledDurationBuffer[0] > 99) ? 99 : ledDurationBuffer[0];
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <validateDuration+0x54>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b63      	cmp	r3, #99	; 0x63
 8001422:	bfa8      	it	ge
 8001424:	2363      	movge	r3, #99	; 0x63
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <validateDuration+0x54>)
 8001428:	6013      	str	r3, [r2, #0]
	ledDurationBuffer[0] = (ledDurationBuffer[0] <= 1) ? 2 : ledDurationBuffer[0];
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <validateDuration+0x54>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b02      	cmp	r3, #2
 8001430:	bfb8      	it	lt
 8001432:	2302      	movlt	r3, #2
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <validateDuration+0x54>)
 8001436:	6013      	str	r3, [r2, #0]

	ledDurationBuffer[1] = (ledDurationBuffer[1] >= ledDurationBuffer[0]) ? ledDurationBuffer[0] - 1 : ledDurationBuffer[1];
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <validateDuration+0x54>)
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <validateDuration+0x54>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	db03      	blt.n	800144c <validateDuration+0x34>
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <validateDuration+0x54>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3b01      	subs	r3, #1
 800144a:	e001      	b.n	8001450 <validateDuration+0x38>
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <validateDuration+0x54>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <validateDuration+0x54>)
 8001452:	6053      	str	r3, [r2, #4]
	ledDurationBuffer[2] = ledDurationBuffer[0] - ledDurationBuffer[1];
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <validateDuration+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <validateDuration+0x54>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	4a03      	ldr	r2, [pc, #12]	; (800146c <validateDuration+0x54>)
 8001460:	6093      	str	r3, [r2, #8]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000008 	.word	0x20000008

08001470 <blinkyLED1s>:

void blinkyLED1s(int led)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	switch(led)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b14      	cmp	r3, #20
 800147c:	d019      	beq.n	80014b2 <blinkyLED1s+0x42>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b14      	cmp	r3, #20
 8001482:	dc36      	bgt.n	80014f2 <blinkyLED1s+0x82>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b12      	cmp	r3, #18
 8001488:	d003      	beq.n	8001492 <blinkyLED1s+0x22>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b13      	cmp	r3, #19
 800148e:	d020      	beq.n	80014d2 <blinkyLED1s+0x62>
			HAL_GPIO_TogglePin(GREEN_HOZ_GPIO_Port, GREEN_HOZ_Pin);
			HAL_GPIO_TogglePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin);
		}
		break;
	default:
		break;
 8001490:	e02f      	b.n	80014f2 <blinkyLED1s+0x82>
		if(timer_blinky_led_flag)
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <blinkyLED1s+0x98>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d02d      	beq.n	80014f6 <blinkyLED1s+0x86>
			setTimerBlinky(100);
 800149a:	2064      	movs	r0, #100	; 0x64
 800149c:	f000 fa54 	bl	8001948 <setTimerBlinky>
			HAL_GPIO_TogglePin(RED_HOZ_GPIO_Port, RED_HOZ_Pin);
 80014a0:	2108      	movs	r1, #8
 80014a2:	481a      	ldr	r0, [pc, #104]	; (800150c <blinkyLED1s+0x9c>)
 80014a4:	f000 fe21 	bl	80020ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_VER_GPIO_Port, RED_VER_Pin);
 80014a8:	2104      	movs	r1, #4
 80014aa:	4818      	ldr	r0, [pc, #96]	; (800150c <blinkyLED1s+0x9c>)
 80014ac:	f000 fe1d 	bl	80020ea <HAL_GPIO_TogglePin>
		break;
 80014b0:	e021      	b.n	80014f6 <blinkyLED1s+0x86>
		if(timer_blinky_led_flag)
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <blinkyLED1s+0x98>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01f      	beq.n	80014fa <blinkyLED1s+0x8a>
			setTimerBlinky(100);
 80014ba:	2064      	movs	r0, #100	; 0x64
 80014bc:	f000 fa44 	bl	8001948 <setTimerBlinky>
			HAL_GPIO_TogglePin(YELLOW_HOZ_GPIO_Port, YELLOW_HOZ_Pin);
 80014c0:	2110      	movs	r1, #16
 80014c2:	4812      	ldr	r0, [pc, #72]	; (800150c <blinkyLED1s+0x9c>)
 80014c4:	f000 fe11 	bl	80020ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_VER_GPIO_Port, YELLOW_VER_Pin);
 80014c8:	2102      	movs	r1, #2
 80014ca:	4810      	ldr	r0, [pc, #64]	; (800150c <blinkyLED1s+0x9c>)
 80014cc:	f000 fe0d 	bl	80020ea <HAL_GPIO_TogglePin>
		break;
 80014d0:	e013      	b.n	80014fa <blinkyLED1s+0x8a>
		if(timer_blinky_led_flag)
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <blinkyLED1s+0x98>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d011      	beq.n	80014fe <blinkyLED1s+0x8e>
			setTimerBlinky(100);
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f000 fa34 	bl	8001948 <setTimerBlinky>
			HAL_GPIO_TogglePin(GREEN_HOZ_GPIO_Port, GREEN_HOZ_Pin);
 80014e0:	2120      	movs	r1, #32
 80014e2:	480a      	ldr	r0, [pc, #40]	; (800150c <blinkyLED1s+0x9c>)
 80014e4:	f000 fe01 	bl	80020ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin);
 80014e8:	2101      	movs	r1, #1
 80014ea:	4808      	ldr	r0, [pc, #32]	; (800150c <blinkyLED1s+0x9c>)
 80014ec:	f000 fdfd 	bl	80020ea <HAL_GPIO_TogglePin>
		break;
 80014f0:	e005      	b.n	80014fe <blinkyLED1s+0x8e>
		break;
 80014f2:	bf00      	nop
 80014f4:	e004      	b.n	8001500 <blinkyLED1s+0x90>
		break;
 80014f6:	bf00      	nop
 80014f8:	e002      	b.n	8001500 <blinkyLED1s+0x90>
		break;
 80014fa:	bf00      	nop
 80014fc:	e000      	b.n	8001500 <blinkyLED1s+0x90>
		break;
 80014fe:	bf00      	nop
	}
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000080 	.word	0x20000080
 800150c:	40010c00 	.word	0x40010c00

08001510 <turnOffLEDAll>:
	default:
		break;
	}
}
void turnOffLEDAll()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2104      	movs	r1, #4
 8001518:	480e      	ldr	r0, [pc, #56]	; (8001554 <turnOffLEDAll+0x44>)
 800151a:	f000 fdce 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin, RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2101      	movs	r1, #1
 8001522:	480c      	ldr	r0, [pc, #48]	; (8001554 <turnOffLEDAll+0x44>)
 8001524:	f000 fdc9 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_VER_GPIO_Port, YELLOW_VER_Pin, RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2102      	movs	r1, #2
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <turnOffLEDAll+0x44>)
 800152e:	f000 fdc4 	bl	80020ba <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_HOZ_GPIO_Port, RED_HOZ_Pin, RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2108      	movs	r1, #8
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <turnOffLEDAll+0x44>)
 8001538:	f000 fdbf 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_HOZ_GPIO_Port, GREEN_HOZ_Pin, RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2120      	movs	r1, #32
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <turnOffLEDAll+0x44>)
 8001542:	f000 fdba 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_HOZ_GPIO_Port, YELLOW_HOZ_Pin, RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2110      	movs	r1, #16
 800154a:	4802      	ldr	r0, [pc, #8]	; (8001554 <turnOffLEDAll+0x44>)
 800154c:	f000 fdb5 	bl	80020ba <HAL_GPIO_WritePin>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010c00 	.word	0x40010c00

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155c:	f000 faac 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001560:	f000 f810 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001564:	f000 f896 	bl	8001694 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001568:	f000 f848 	bl	80015fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <main+0x28>)
 800156e:	f001 fa01 	bl	8002974 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_normal_mode();
 8001572:	f7fe fe55 	bl	8000220 <fsm_normal_mode>
	  fsm_manual();
 8001576:	f7fe fde9 	bl	800014c <fsm_manual>
	  fsm_setting();
 800157a:	f7ff f847 	bl	800060c <fsm_setting>
	  fsm_normal_mode();
 800157e:	e7f8      	b.n	8001572 <main+0x1a>
 8001580:	200000ac 	.word	0x200000ac

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	; 0x40
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	2228      	movs	r2, #40	; 0x28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f001 fd9e 	bl	80030d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fdae 	bl	800211c <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015c6:	f000 f8d7 	bl	8001778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f81a 	bl	800261c <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ee:	f000 f8c3 	bl	8001778 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3740      	adds	r7, #64	; 0x40
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_TIM2_Init+0x94>)
 800161a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_TIM2_Init+0x94>)
 8001622:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001626:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_TIM2_Init+0x94>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM2_Init+0x94>)
 8001630:	2209      	movs	r2, #9
 8001632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_TIM2_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM2_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <MX_TIM2_Init+0x94>)
 8001642:	f001 f947 	bl	80028d4 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800164c:	f000 f894 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_TIM2_Init+0x94>)
 800165e:	f001 fac5 	bl	8002bec <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001668:	f000 f886 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_TIM2_Init+0x94>)
 800167a:	f001 fc9d 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001684:	f000 f878 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200000ac 	.word	0x200000ac

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <MX_GPIO_Init+0xd4>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a2e      	ldr	r2, [pc, #184]	; (8001768 <MX_GPIO_Init+0xd4>)
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <MX_GPIO_Init+0xd4>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <MX_GPIO_Init+0xd4>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a28      	ldr	r2, [pc, #160]	; (8001768 <MX_GPIO_Init+0xd4>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b26      	ldr	r3, [pc, #152]	; (8001768 <MX_GPIO_Init+0xd4>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <MX_GPIO_Init+0xd4>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a22      	ldr	r2, [pc, #136]	; (8001768 <MX_GPIO_Init+0xd4>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b20      	ldr	r3, [pc, #128]	; (8001768 <MX_GPIO_Init+0xd4>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 80016f0:	2200      	movs	r2, #0
 80016f2:	f24c 11fe 	movw	r1, #49662	; 0xc1fe
 80016f6:	481d      	ldr	r0, [pc, #116]	; (800176c <MX_GPIO_Init+0xd8>)
 80016f8:	f000 fcdf 	bl	80020ba <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG5_VER_Pin|SEG6_VER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_VER_Pin|YELLOW_VER_Pin|RED_VER_Pin|RED_HOZ_Pin
 80016fc:	2200      	movs	r2, #0
 80016fe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001702:	481b      	ldr	r0, [pc, #108]	; (8001770 <MX_GPIO_Init+0xdc>)
 8001704:	f000 fcd9 	bl	80020ba <HAL_GPIO_WritePin>
                          |YELLOW_HOZ_Pin|GREEN_HOZ_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001708:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800170c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <MX_GPIO_Init+0xe0>)
 800171e:	f000 fb3b 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TEST_Pin SEG0_Pin SEG1_Pin SEG2_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           SEG5_VER_Pin SEG6_VER_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 8001722:	f24c 13fe 	movw	r3, #49662	; 0xc1fe
 8001726:	613b      	str	r3, [r7, #16]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG5_VER_Pin|SEG6_VER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2302      	movs	r3, #2
 8001732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4619      	mov	r1, r3
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_GPIO_Init+0xd8>)
 800173c:	f000 fb2c 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_VER_Pin YELLOW_VER_Pin RED_VER_Pin RED_HOZ_Pin
                           YELLOW_HOZ_Pin GREEN_HOZ_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = GREEN_VER_Pin|YELLOW_VER_Pin|RED_VER_Pin|RED_HOZ_Pin
 8001740:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001744:	613b      	str	r3, [r7, #16]
                          |YELLOW_HOZ_Pin|GREEN_HOZ_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2302      	movs	r3, #2
 8001750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_GPIO_Init+0xdc>)
 800175a:	f000 fb1d 	bl	8001d98 <HAL_GPIO_Init>

}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40010800 	.word	0x40010800
 8001770:	40010c00 	.word	0x40010c00
 8001774:	40011000 	.word	0x40011000

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	e7fe      	b.n	8001780 <Error_Handler+0x8>
	...

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_MspInit+0x5c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_MspInit+0x5c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_MspInit+0x5c>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_MspInit+0x5c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_MspInit+0x5c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_MspInit+0x5c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_MspInit+0x60>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_MspInit+0x60>)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d113      	bne.n	8001822 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_TIM_Base_MspInit+0x44>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_TIM_Base_MspInit+0x44>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_TIM_Base_MspInit+0x44>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	201c      	movs	r0, #28
 8001818:	f000 fa87 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800181c:	201c      	movs	r0, #28
 800181e:	f000 faa0 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler+0x4>

08001836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <MemManage_Handler+0x4>

08001842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler+0x4>

0800184e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001876:	f000 f965 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM2_IRQHandler+0x10>)
 8001886:	f001 f8c1 	bl	8002a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000ac 	.word	0x200000ac

08001894 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_TIM_PeriodElapsedCallback>:
 */
#include "timer.h"
#include "global.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d109      	bne.n	80018c6 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		timerRun();
 80018b2:	f000 f871 	bl	8001998 <timerRun>
		button_reading();
 80018b6:	f7ff f913 	bl	8000ae0 <button_reading>
		fsm_normal_mode();
 80018ba:	f7fe fcb1 	bl	8000220 <fsm_normal_mode>
		fsm_manual();
 80018be:	f7fe fc45 	bl	800014c <fsm_manual>
		fsm_setting();
 80018c2:	f7fe fea3 	bl	800060c <fsm_setting>
	}
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <setTimerVertical>:
int timer_counter_7seg = 0;
int timer_counter_blinky = 0;
int timer_counter_clock = 0;

void setTimerVertical(int duration)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	timer_vertical_flag = 0;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <setTimerVertical+0x20>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
	timer_counter_vertical = duration;
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <setTimerVertical+0x24>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000078 	.word	0x20000078
 80018f4:	2000008c 	.word	0x2000008c

080018f8 <setTimerHorizontal>:
void setTimerHorizontal(int duration)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	timer_horizontal_flag = 0;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <setTimerHorizontal+0x20>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
	timer_counter_horizontal = duration;
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <setTimerHorizontal+0x24>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000074 	.word	0x20000074
 800191c:	20000088 	.word	0x20000088

08001920 <setTimer7SEG>:
void setTimer7SEG(int duration)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	timer_7seg_flag = 0;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <setTimer7SEG+0x20>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
	timer_counter_7seg = duration;
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <setTimer7SEG+0x24>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	2000007c 	.word	0x2000007c
 8001944:	20000090 	.word	0x20000090

08001948 <setTimerBlinky>:

void setTimerBlinky(int duration)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	timer_blinky_led_flag = 0;
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <setTimerBlinky+0x20>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
	timer_counter_blinky = duration;
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <setTimerBlinky+0x24>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000080 	.word	0x20000080
 800196c:	20000094 	.word	0x20000094

08001970 <setTimerClock>:

void setTimerClock(int duration)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	timer_clock_flag = 0;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <setTimerClock+0x20>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
	timer_counter_clock = duration;
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <setTimerClock+0x24>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000084 	.word	0x20000084
 8001994:	20000098 	.word	0x20000098

08001998 <timerRun>:


void timerRun()
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	if(timer_counter_vertical > 0)
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <timerRun+0xac>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	dd0b      	ble.n	80019bc <timerRun+0x24>
	{
		timer_counter_vertical--;
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <timerRun+0xac>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <timerRun+0xac>)
 80019ac:	6013      	str	r3, [r2, #0]
		if(timer_counter_vertical <= 0)
 80019ae:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <timerRun+0xac>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dc02      	bgt.n	80019bc <timerRun+0x24>
		{
			timer_vertical_flag = 1;
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <timerRun+0xb0>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter_horizontal > 0)
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <timerRun+0xb4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	dd0b      	ble.n	80019dc <timerRun+0x44>
	{
		timer_counter_horizontal--;
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <timerRun+0xb4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <timerRun+0xb4>)
 80019cc:	6013      	str	r3, [r2, #0]
		if(timer_counter_horizontal <= 0)
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <timerRun+0xb4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	dc02      	bgt.n	80019dc <timerRun+0x44>
		{
			timer_horizontal_flag = 1;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <timerRun+0xb8>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter_7seg > 0)
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <timerRun+0xbc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	dd0b      	ble.n	80019fc <timerRun+0x64>
	{
		timer_counter_7seg--;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <timerRun+0xbc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <timerRun+0xbc>)
 80019ec:	6013      	str	r3, [r2, #0]
		if(timer_counter_7seg <= 0)
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <timerRun+0xbc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	dc02      	bgt.n	80019fc <timerRun+0x64>
		{
			timer_7seg_flag = 1;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <timerRun+0xc0>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter_blinky > 0)
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <timerRun+0xc4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	dd0b      	ble.n	8001a1c <timerRun+0x84>
	{
		timer_counter_blinky--;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <timerRun+0xc4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <timerRun+0xc4>)
 8001a0c:	6013      	str	r3, [r2, #0]
		if(timer_counter_blinky <= 0)
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <timerRun+0xc4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	dc02      	bgt.n	8001a1c <timerRun+0x84>
		{
			timer_blinky_led_flag = 1;
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <timerRun+0xc8>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer_counter_clock > 0)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <timerRun+0xcc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	dd0b      	ble.n	8001a3c <timerRun+0xa4>
	{
		timer_counter_clock--;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <timerRun+0xcc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <timerRun+0xcc>)
 8001a2c:	6013      	str	r3, [r2, #0]
		if(timer_counter_clock <= 0)
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <timerRun+0xcc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	dc02      	bgt.n	8001a3c <timerRun+0xa4>
		{
			timer_clock_flag = 1;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <timerRun+0xd0>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	2000008c 	.word	0x2000008c
 8001a48:	20000078 	.word	0x20000078
 8001a4c:	20000088 	.word	0x20000088
 8001a50:	20000074 	.word	0x20000074
 8001a54:	20000090 	.word	0x20000090
 8001a58:	2000007c 	.word	0x2000007c
 8001a5c:	20000094 	.word	0x20000094
 8001a60:	20000080 	.word	0x20000080
 8001a64:	20000098 	.word	0x20000098
 8001a68:	20000084 	.word	0x20000084

08001a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a6c:	f7ff ff12 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a72:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a74:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a88:	4c09      	ldr	r4, [pc, #36]	; (8001ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a96:	f001 faf9 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9a:	f7ff fd5d 	bl	8001558 <main>
  bx lr
 8001a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001aa8:	08003128 	.word	0x08003128
  ldr r2, =_sbss
 8001aac:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001ab0:	200000f8 	.word	0x200000f8

08001ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC1_2_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x28>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x28>)
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
 8001ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f923 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fe56 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f93b 	bl	8001d7e <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f903 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000018 	.word	0x20000018
 8001b3c:	20000020 	.word	0x20000020
 8001b40:	2000001c 	.word	0x2000001c

08001b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_IncTick+0x1c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_IncTick+0x20>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_IncTick+0x20>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	20000020 	.word	0x20000020
 8001b64:	200000f4 	.word	0x200000f4

08001b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <HAL_GetTick+0x10>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	200000f4 	.word	0x200000f4

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <__NVIC_EnableIRQ+0x34>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff90 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff2d 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff42 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff90 	bl	8001c6c <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5f 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff35 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b08b      	sub	sp, #44	; 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	e148      	b.n	800203e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dac:	2201      	movs	r2, #1
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8137 	bne.w	8002038 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4aa3      	ldr	r2, [pc, #652]	; (800205c <HAL_GPIO_Init+0x2c4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d05e      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dd4:	4aa1      	ldr	r2, [pc, #644]	; (800205c <HAL_GPIO_Init+0x2c4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d875      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dda:	4aa1      	ldr	r2, [pc, #644]	; (8002060 <HAL_GPIO_Init+0x2c8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d058      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001de0:	4a9f      	ldr	r2, [pc, #636]	; (8002060 <HAL_GPIO_Init+0x2c8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d86f      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001de6:	4a9f      	ldr	r2, [pc, #636]	; (8002064 <HAL_GPIO_Init+0x2cc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d052      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dec:	4a9d      	ldr	r2, [pc, #628]	; (8002064 <HAL_GPIO_Init+0x2cc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d869      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001df2:	4a9d      	ldr	r2, [pc, #628]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d04c      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001df8:	4a9b      	ldr	r2, [pc, #620]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d863      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dfe:	4a9b      	ldr	r2, [pc, #620]	; (800206c <HAL_GPIO_Init+0x2d4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d046      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001e04:	4a99      	ldr	r2, [pc, #612]	; (800206c <HAL_GPIO_Init+0x2d4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d85d      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d82a      	bhi.n	8001e64 <HAL_GPIO_Init+0xcc>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d859      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <HAL_GPIO_Init+0x80>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e6d 	.word	0x08001e6d
 8001e20:	08001e7f 	.word	0x08001e7f
 8001e24:	08001ec1 	.word	0x08001ec1
 8001e28:	08001ec7 	.word	0x08001ec7
 8001e2c:	08001ec7 	.word	0x08001ec7
 8001e30:	08001ec7 	.word	0x08001ec7
 8001e34:	08001ec7 	.word	0x08001ec7
 8001e38:	08001ec7 	.word	0x08001ec7
 8001e3c:	08001ec7 	.word	0x08001ec7
 8001e40:	08001ec7 	.word	0x08001ec7
 8001e44:	08001ec7 	.word	0x08001ec7
 8001e48:	08001ec7 	.word	0x08001ec7
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ec7 	.word	0x08001ec7
 8001e54:	08001ec7 	.word	0x08001ec7
 8001e58:	08001ec7 	.word	0x08001ec7
 8001e5c:	08001e75 	.word	0x08001e75
 8001e60:	08001e89 	.word	0x08001e89
 8001e64:	4a82      	ldr	r2, [pc, #520]	; (8002070 <HAL_GPIO_Init+0x2d8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6a:	e02c      	b.n	8001ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e029      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	623b      	str	r3, [r7, #32]
          break;
 8001e7c:	e024      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	3308      	adds	r3, #8
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e01f      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e01a      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e013      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	611a      	str	r2, [r3, #16]
          break;
 8001eb2:	e009      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	615a      	str	r2, [r3, #20]
          break;
 8001ebe:	e003      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          break;
 8001ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d801      	bhi.n	8001ed2 <HAL_GPIO_Init+0x13a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_Init+0x13e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d802      	bhi.n	8001ee4 <HAL_GPIO_Init+0x14c>
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x152>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	3b08      	subs	r3, #8
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	6a39      	ldr	r1, [r7, #32]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	431a      	orrs	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8090 	beq.w	8002038 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f18:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a55      	ldr	r2, [pc, #340]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f30:	4a51      	ldr	r2, [pc, #324]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a49      	ldr	r2, [pc, #292]	; (800207c <HAL_GPIO_Init+0x2e4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00d      	beq.n	8001f78 <HAL_GPIO_Init+0x1e0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a48      	ldr	r2, [pc, #288]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <HAL_GPIO_Init+0x1dc>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a47      	ldr	r2, [pc, #284]	; (8002084 <HAL_GPIO_Init+0x2ec>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_GPIO_Init+0x1d8>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e004      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f70:	2303      	movs	r3, #3
 8001f72:	e002      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7c:	f002 0203 	and.w	r2, r2, #3
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	4093      	lsls	r3, r2
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f8a:	493b      	ldr	r1, [pc, #236]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa4:	4b38      	ldr	r3, [pc, #224]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fb2:	4b35      	ldr	r3, [pc, #212]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4933      	ldr	r1, [pc, #204]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	492d      	ldr	r1, [pc, #180]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4929      	ldr	r1, [pc, #164]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4923      	ldr	r1, [pc, #140]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	491f      	ldr	r1, [pc, #124]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 800200c:	4013      	ands	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4919      	ldr	r1, [pc, #100]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4915      	ldr	r1, [pc, #84]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002034:	4013      	ands	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	3301      	adds	r3, #1
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f aeaf 	bne.w	8001dac <HAL_GPIO_Init+0x14>
  }
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	372c      	adds	r7, #44	; 0x2c
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	10320000 	.word	0x10320000
 8002060:	10310000 	.word	0x10310000
 8002064:	10220000 	.word	0x10220000
 8002068:	10210000 	.word	0x10210000
 800206c:	10120000 	.word	0x10120000
 8002070:	10110000 	.word	0x10110000
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	40010800 	.word	0x40010800
 8002080:	40010c00 	.word	0x40010c00
 8002084:	40011000 	.word	0x40011000
 8002088:	40010400 	.word	0x40010400

0800208c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e001      	b.n	80020ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	807b      	strh	r3, [r7, #2]
 80020c6:	4613      	mov	r3, r2
 80020c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ca:	787b      	ldrb	r3, [r7, #1]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d6:	e003      	b.n	80020e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	041a      	lsls	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020fc:	887a      	ldrh	r2, [r7, #2]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	041a      	lsls	r2, r3, #16
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43d9      	mvns	r1, r3
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	400b      	ands	r3, r1
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e26c      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b92      	ldr	r3, [pc, #584]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00c      	beq.n	8002162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002148:	4b8f      	ldr	r3, [pc, #572]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d112      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
 8002154:	4b8c      	ldr	r3, [pc, #560]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b89      	ldr	r3, [pc, #548]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06c      	beq.n	8002248 <HAL_RCC_OscConfig+0x12c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d168      	bne.n	8002248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e246      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x76>
 8002184:	4b80      	ldr	r3, [pc, #512]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a7f      	ldr	r2, [pc, #508]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x98>
 800219a:	4b7b      	ldr	r3, [pc, #492]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7a      	ldr	r2, [pc, #488]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b78      	ldr	r3, [pc, #480]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a77      	ldr	r2, [pc, #476]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0xbc>
 80021be:	4b72      	ldr	r3, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a71      	ldr	r2, [pc, #452]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6e      	ldr	r2, [pc, #440]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021d8:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6a      	ldr	r2, [pc, #424]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a67      	ldr	r2, [pc, #412]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fcb6 	bl	8001b68 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff fcb2 	bl	8001b68 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1fa      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xe4>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff fca2 	bl	8001b68 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff fc9e 	bl	8001b68 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1e6      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x10c>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002256:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002262:	4b49      	ldr	r3, [pc, #292]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
 800226e:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1ba      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4939      	ldr	r1, [pc, #228]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff fc57 	bl	8001b68 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022be:	f7ff fc53 	bl	8001b68 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e19b      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4927      	ldr	r1, [pc, #156]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fc36 	bl	8001b68 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7ff fc32 	bl	8001b68 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e17a      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03a      	beq.n	80023a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7ff fc16 	bl	8001b68 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff fc12 	bl	8001b68 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e15a      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f000 fa9a 	bl	8002898 <RCC_Delay>
 8002364:	e01c      	b.n	80023a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236c:	f7ff fbfc 	bl	8001b68 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002372:	e00f      	b.n	8002394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff fbf8 	bl	8001b68 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d908      	bls.n	8002394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e140      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	42420000 	.word	0x42420000
 8002390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	4b9e      	ldr	r3, [pc, #632]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e9      	bne.n	8002374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a6 	beq.w	80024fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b97      	ldr	r3, [pc, #604]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a93      	ldr	r2, [pc, #588]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b91      	ldr	r3, [pc, #580]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b8e      	ldr	r3, [pc, #568]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b8b      	ldr	r3, [pc, #556]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a8a      	ldr	r2, [pc, #552]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fbb9 	bl	8001b68 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7ff fbb5 	bl	8001b68 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0fd      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x312>
 8002420:	4b7b      	ldr	r3, [pc, #492]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a7a      	ldr	r2, [pc, #488]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	e02d      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x334>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x356>
 8002458:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6213      	str	r3, [r2, #32]
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a69      	ldr	r2, [pc, #420]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002472:	4b67      	ldr	r3, [pc, #412]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a66      	ldr	r2, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	4b64      	ldr	r3, [pc, #400]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a63      	ldr	r2, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7ff fb69 	bl	8001b68 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7ff fb65 	bl	8001b68 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0ab      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b57      	ldr	r3, [pc, #348]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x37e>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7ff fb53 	bl	8001b68 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fb4f 	bl	8001b68 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e095      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b48      	ldr	r3, [pc, #288]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8081 	beq.w	8002606 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	4b42      	ldr	r3, [pc, #264]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d061      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d146      	bne.n	80025a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7ff fb23 	bl	8001b68 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff fb1f 	bl	8001b68 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e067      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d108      	bne.n	8002560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	492d      	ldr	r1, [pc, #180]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a19      	ldr	r1, [r3, #32]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	430b      	orrs	r3, r1
 8002572:	4927      	ldr	r1, [pc, #156]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff faf3 	bl	8001b68 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7ff faef 	bl	8001b68 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e037      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x46a>
 80025a4:	e02f      	b.n	8002606 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fadc 	bl	8001b68 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff fad8 	bl	8001b68 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e020      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x498>
 80025d2:	e018      	b.n	8002606 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e013      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d106      	bne.n	8002602 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	40007000 	.word	0x40007000
 8002618:	42420060 	.word	0x42420060

0800261c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d0      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4965      	ldr	r1, [pc, #404]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800269a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d040      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d115      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e073      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06b      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4936      	ldr	r1, [pc, #216]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7ff fa2c 	bl	8001b68 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7ff fa28 	bl	8001b68 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e053      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d210      	bcs.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4922      	ldr	r1, [pc, #136]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f821 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	490a      	ldr	r1, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	5ccb      	ldrb	r3, [r1, r3]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1cc>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1d0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f98a 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	080030fc 	.word	0x080030fc
 80027e8:	20000018 	.word	0x20000018
 80027ec:	2000001c 	.word	0x2000001c

080027f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x30>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x36>
 800281e:	e027      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002822:	613b      	str	r3, [r7, #16]
      break;
 8002824:	e027      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d010      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0c5b      	lsrs	r3, r3, #17
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa0>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	fb02 f203 	mul.w	r2, r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e004      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	613b      	str	r3, [r7, #16]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002872:	613b      	str	r3, [r7, #16]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	693b      	ldr	r3, [r7, #16]
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	007a1200 	.word	0x007a1200
 800288c:	0800310c 	.word	0x0800310c
 8002890:	0800311c 	.word	0x0800311c
 8002894:	003d0900 	.word	0x003d0900

08002898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RCC_Delay+0x34>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <RCC_Delay+0x38>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a5b      	lsrs	r3, r3, #9
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b4:	bf00      	nop
  }
  while (Delay --);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	60fa      	str	r2, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f9      	bne.n	80028b4 <RCC_Delay+0x1c>
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20000018 	.word	0x20000018
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e041      	b.n	800296a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe ff74 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f000 fa56 	bl	8002dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e035      	b.n	80029f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <HAL_TIM_Base_Start_IT+0x90>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d009      	beq.n	80029c2 <HAL_TIM_Base_Start_IT+0x4e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d004      	beq.n	80029c2 <HAL_TIM_Base_Start_IT+0x4e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <HAL_TIM_Base_Start_IT+0x94>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d111      	bne.n	80029e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b06      	cmp	r3, #6
 80029d2:	d010      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e4:	e007      	b.n	80029f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400

08002a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d020      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0202 	mvn.w	r2, #2
 8002a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f998 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f98b 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f99a 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d020      	beq.n	8002abc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0204 	mvn.w	r2, #4
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2202      	movs	r2, #2
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f972 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f965 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f974 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d020      	beq.n	8002b08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01b      	beq.n	8002b08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0208 	mvn.w	r2, #8
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2204      	movs	r2, #4
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f94c 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f93f 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f94e 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d020      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01b      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0210 	mvn.w	r2, #16
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f926 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f919 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f928 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0201 	mvn.w	r2, #1
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe fe94 	bl	80018a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa6f 	bl	800307a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8f8 	bl	8002db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0220 	mvn.w	r2, #32
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa42 	bl	8003068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_TIM_ConfigClockSource+0x1c>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0b4      	b.n	8002d72 <HAL_TIM_ConfigClockSource+0x186>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c40:	d03e      	beq.n	8002cc0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c46:	f200 8087 	bhi.w	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4e:	f000 8086 	beq.w	8002d5e <HAL_TIM_ConfigClockSource+0x172>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	d87f      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b70      	cmp	r3, #112	; 0x70
 8002c5a:	d01a      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0xa6>
 8002c5c:	2b70      	cmp	r3, #112	; 0x70
 8002c5e:	d87b      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b60      	cmp	r3, #96	; 0x60
 8002c62:	d050      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x11a>
 8002c64:	2b60      	cmp	r3, #96	; 0x60
 8002c66:	d877      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d03c      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c6c:	2b50      	cmp	r3, #80	; 0x50
 8002c6e:	d873      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d058      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x13a>
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d86f      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b30      	cmp	r3, #48	; 0x30
 8002c7a:	d064      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c7c:	2b30      	cmp	r3, #48	; 0x30
 8002c7e:	d86b      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d060      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d867      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d05c      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d05a      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c90:	e062      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6899      	ldr	r1, [r3, #8]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f000 f96a 	bl	8002f7a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	609a      	str	r2, [r3, #8]
      break;
 8002cbe:	e04f      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f000 f953 	bl	8002f7a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce2:	609a      	str	r2, [r3, #8]
      break;
 8002ce4:	e03c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f000 f8ca 	bl	8002e8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2150      	movs	r1, #80	; 0x50
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f921 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d04:	e02c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f000 f8e8 	bl	8002ee8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2160      	movs	r1, #96	; 0x60
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f911 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d24:	e01c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f000 f8aa 	bl	8002e8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f901 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d44:	e00c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f000 f8f8 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d56:	e003      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e000      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <TIM_Base_SetConfig+0xc0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <TIM_Base_SetConfig+0x28>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de2:	d003      	beq.n	8002dec <TIM_Base_SetConfig+0x28>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a28      	ldr	r2, [pc, #160]	; (8002e88 <TIM_Base_SetConfig+0xc4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d108      	bne.n	8002dfe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <TIM_Base_SetConfig+0xc0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <TIM_Base_SetConfig+0x52>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0c:	d003      	beq.n	8002e16 <TIM_Base_SetConfig+0x52>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <TIM_Base_SetConfig+0xc4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d108      	bne.n	8002e28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <TIM_Base_SetConfig+0xc0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d103      	bne.n	8002e5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f023 0201 	bic.w	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	611a      	str	r2, [r3, #16]
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40000400 	.word	0x40000400

08002e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f023 030a 	bic.w	r3, r3, #10
 8002ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f023 0210 	bic.w	r2, r3, #16
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	031b      	lsls	r3, r3, #12
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	621a      	str	r2, [r3, #32]
}
 8002f3c:	bf00      	nop
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f043 0307 	orr.w	r3, r3, #7
 8002f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	609a      	str	r2, [r3, #8]
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e041      	b.n	8003054 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a14      	ldr	r2, [pc, #80]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d009      	beq.n	8003028 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d004      	beq.n	8003028 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a10      	ldr	r2, [pc, #64]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10c      	bne.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	4313      	orrs	r3, r2
 8003038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40000400 	.word	0x40000400

08003068 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2600      	movs	r6, #0
 8003090:	4d0c      	ldr	r5, [pc, #48]	; (80030c4 <__libc_init_array+0x38>)
 8003092:	4c0d      	ldr	r4, [pc, #52]	; (80030c8 <__libc_init_array+0x3c>)
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	f000 f822 	bl	80030e4 <_init>
 80030a0:	2600      	movs	r6, #0
 80030a2:	4d0a      	ldr	r5, [pc, #40]	; (80030cc <__libc_init_array+0x40>)
 80030a4:	4c0a      	ldr	r4, [pc, #40]	; (80030d0 <__libc_init_array+0x44>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	08003120 	.word	0x08003120
 80030c8:	08003120 	.word	0x08003120
 80030cc:	08003120 	.word	0x08003120
 80030d0:	08003124 	.word	0x08003124

080030d4 <memset>:
 80030d4:	4603      	mov	r3, r0
 80030d6:	4402      	add	r2, r0
 80030d8:	4293      	cmp	r3, r2
 80030da:	d100      	bne.n	80030de <memset+0xa>
 80030dc:	4770      	bx	lr
 80030de:	f803 1b01 	strb.w	r1, [r3], #1
 80030e2:	e7f9      	b.n	80030d8 <memset+0x4>

080030e4 <_init>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	bf00      	nop
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr

080030f0 <_fini>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr
